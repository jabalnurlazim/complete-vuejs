{
  "version": 3,
  "sources": ["../@vue/runtime-dom/dist/runtime-dom.esm-bundler.js", "../@vue/shared/dist/shared.esm-bundler.js", "../@vue/compiler-core/dist/compiler-core.esm-bundler.js", "../@vue/compiler-dom/dist/compiler-dom.esm-bundler.js", "../vue/dist/vue.esm-bundler.js"],
  "sourcesContent": ["import { camelize, warn, callWithAsyncErrorHandling, getCurrentInstance, onMounted, watchEffect, onUpdated, Fragment, h, BaseTransition, useTransitionState, toRaw, getTransitionRawChildren, setTransitionHooks, resolveTransitionHooks, createVNode, createRenderer, isRuntimeOnly, createHydrationRenderer } from '@vue/runtime-core';\nexport * from '@vue/runtime-core';\nimport { isString, isArray, hyphenate, capitalize, isSpecialBooleanAttr, isOn, isModelListener, isFunction, EMPTY_OBJ, extend, isObject, toNumber, invokeArrayFns, looseIndexOf, isSet, looseEqual, isHTMLTag, isSVGTag } from '@vue/shared';\n\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst doc = (typeof document !== 'undefined' ? document : null);\r\nlet tempContainer;\r\nlet tempSVGContainer;\r\nconst nodeOps = {\r\n    insert: (child, parent, anchor) => {\r\n        parent.insertBefore(child, anchor || null);\r\n    },\r\n    remove: child => {\r\n        const parent = child.parentNode;\r\n        if (parent) {\r\n            parent.removeChild(child);\r\n        }\r\n    },\r\n    createElement: (tag, isSVG, is) => isSVG\r\n        ? doc.createElementNS(svgNS, tag)\r\n        : doc.createElement(tag, is ? { is } : undefined),\r\n    createText: text => doc.createTextNode(text),\r\n    createComment: text => doc.createComment(text),\r\n    setText: (node, text) => {\r\n        node.nodeValue = text;\r\n    },\r\n    setElementText: (el, text) => {\r\n        el.textContent = text;\r\n    },\r\n    parentNode: node => node.parentNode,\r\n    nextSibling: node => node.nextSibling,\r\n    querySelector: selector => doc.querySelector(selector),\r\n    setScopeId(el, id) {\r\n        el.setAttribute(id, '');\r\n    },\r\n    cloneNode(el) {\r\n        return el.cloneNode(true);\r\n    },\r\n    // __UNSAFE__\r\n    // Reason: innerHTML.\r\n    // Static content here can only come from compiled templates.\r\n    // As long as the user only uses trusted templates, this is safe.\r\n    insertStaticContent(content, parent, anchor, isSVG) {\r\n        const temp = isSVG\r\n            ? tempSVGContainer ||\r\n                (tempSVGContainer = doc.createElementNS(svgNS, 'svg'))\r\n            : tempContainer || (tempContainer = doc.createElement('div'));\r\n        temp.innerHTML = content;\r\n        const first = temp.firstChild;\r\n        let node = first;\r\n        let last = node;\r\n        while (node) {\r\n            last = node;\r\n            nodeOps.insert(node, parent, anchor);\r\n            node = temp.firstChild;\r\n        }\r\n        return [first, last];\r\n    }\r\n};\n\n// compiler should normalize class + :class bindings on the same element\r\n// into a single binding ['staticClass', dynamic]\r\nfunction patchClass(el, value, isSVG) {\r\n    if (value == null) {\r\n        value = '';\r\n    }\r\n    if (isSVG) {\r\n        el.setAttribute('class', value);\r\n    }\r\n    else {\r\n        // directly setting className should be faster than setAttribute in theory\r\n        // if this is an element during a transition, take the temporary transition\r\n        // classes into account.\r\n        const transitionClasses = el._vtc;\r\n        if (transitionClasses) {\r\n            value = (value\r\n                ? [value, ...transitionClasses]\r\n                : [...transitionClasses]).join(' ');\r\n        }\r\n        el.className = value;\r\n    }\r\n}\n\nfunction patchStyle(el, prev, next) {\r\n    const style = el.style;\r\n    if (!next) {\r\n        el.removeAttribute('style');\r\n    }\r\n    else if (isString(next)) {\r\n        if (prev !== next) {\r\n            const current = style.display;\r\n            style.cssText = next;\r\n            // indicates that the `display` of the element is controlled by `v-show`,\r\n            // so we always keep the current `display` value regardless of the `style` value,\r\n            // thus handing over control to `v-show`.\r\n            if ('_vod' in el) {\r\n                style.display = current;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (const key in next) {\r\n            setStyle(style, key, next[key]);\r\n        }\r\n        if (prev && !isString(prev)) {\r\n            for (const key in prev) {\r\n                if (next[key] == null) {\r\n                    setStyle(style, key, '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nconst importantRE = /\\s*!important$/;\r\nfunction setStyle(style, name, val) {\r\n    if (isArray(val)) {\r\n        val.forEach(v => setStyle(style, name, v));\r\n    }\r\n    else {\r\n        if (name.startsWith('--')) {\r\n            // custom property definition\r\n            style.setProperty(name, val);\r\n        }\r\n        else {\r\n            const prefixed = autoPrefix(style, name);\r\n            if (importantRE.test(val)) {\r\n                // !important\r\n                style.setProperty(hyphenate(prefixed), val.replace(importantRE, ''), 'important');\r\n            }\r\n            else {\r\n                style[prefixed] = val;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst prefixes = ['Webkit', 'Moz', 'ms'];\r\nconst prefixCache = {};\r\nfunction autoPrefix(style, rawName) {\r\n    const cached = prefixCache[rawName];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    let name = camelize(rawName);\r\n    if (name !== 'filter' && name in style) {\r\n        return (prefixCache[rawName] = name);\r\n    }\r\n    name = capitalize(name);\r\n    for (let i = 0; i < prefixes.length; i++) {\r\n        const prefixed = prefixes[i] + name;\r\n        if (prefixed in style) {\r\n            return (prefixCache[rawName] = prefixed);\r\n        }\r\n    }\r\n    return rawName;\r\n}\n\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nfunction patchAttr(el, key, value, isSVG) {\r\n    if (isSVG && key.startsWith('xlink:')) {\r\n        if (value == null) {\r\n            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\r\n        }\r\n        else {\r\n            el.setAttributeNS(xlinkNS, key, value);\r\n        }\r\n    }\r\n    else {\r\n        // note we are only checking boolean attributes that don't have a\r\n        // corresponding dom prop of the same name here.\r\n        const isBoolean = isSpecialBooleanAttr(key);\r\n        if (value == null || (isBoolean && value === false)) {\r\n            el.removeAttribute(key);\r\n        }\r\n        else {\r\n            el.setAttribute(key, isBoolean ? '' : value);\r\n        }\r\n    }\r\n}\n\n// __UNSAFE__\r\n// functions. The user is responsible for using them with only trusted content.\r\nfunction patchDOMProp(el, key, value, \r\n// the following args are passed only due to potential innerHTML/textContent\r\n// overriding existing VNodes, in which case the old tree must be properly\r\n// unmounted.\r\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\r\n    if (key === 'innerHTML' || key === 'textContent') {\r\n        if (prevChildren) {\r\n            unmountChildren(prevChildren, parentComponent, parentSuspense);\r\n        }\r\n        el[key] = value == null ? '' : value;\r\n        return;\r\n    }\r\n    if (key === 'value' && el.tagName !== 'PROGRESS') {\r\n        // store value as _value as well since\r\n        // non-string values will be stringified.\r\n        el._value = value;\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n        return;\r\n    }\r\n    if (value === '' || value == null) {\r\n        const type = typeof el[key];\r\n        if (value === '' && type === 'boolean') {\r\n            // e.g. <select multiple> compiles to { multiple: '' }\r\n            el[key] = true;\r\n            return;\r\n        }\r\n        else if (value == null && type === 'string') {\r\n            // e.g. <div :id=\"null\">\r\n            el[key] = '';\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n        else if (type === 'number') {\r\n            // e.g. <img :width=\"null\">\r\n            el[key] = 0;\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n    }\r\n    // some properties perform value validation and throw\r\n    try {\r\n        el[key] = value;\r\n    }\r\n    catch (e) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Failed setting prop \"${key}\" on <${el.tagName.toLowerCase()}>: ` +\r\n                `value ${value} is invalid.`, e);\r\n        }\r\n    }\r\n}\n\n// Async edge case fix requires storing an event listener's attach timestamp.\r\nlet _getNow = Date.now;\r\n// Determine what event timestamp the browser is using. Annoyingly, the\r\n// timestamp can either be hi-res (relative to page load) or low-res\r\n// (relative to UNIX epoch), so in order to compare time we have to use the\r\n// same timestamp type when saving the flush timestamp.\r\nif (typeof document !== 'undefined' &&\r\n    _getNow() > document.createEvent('Event').timeStamp) {\r\n    // if the low-res timestamp which is bigger than the event timestamp\r\n    // (which is evaluated AFTER) it means the event is using a hi-res timestamp,\r\n    // and we need to use the hi-res version for event listeners as well.\r\n    _getNow = () => performance.now();\r\n}\r\n// To avoid the overhead of repeatedly calling performance.now(), we cache\r\n// and use the same timestamp for all event listeners attached in the same tick.\r\nlet cachedNow = 0;\r\nconst p = Promise.resolve();\r\nconst reset = () => {\r\n    cachedNow = 0;\r\n};\r\nconst getNow = () => cachedNow || (p.then(reset), (cachedNow = _getNow()));\r\nfunction addEventListener(el, event, handler, options) {\r\n    el.addEventListener(event, handler, options);\r\n}\r\nfunction removeEventListener(el, event, handler, options) {\r\n    el.removeEventListener(event, handler, options);\r\n}\r\nfunction patchEvent(el, rawName, prevValue, nextValue, instance = null) {\r\n    // vei = vue event invokers\r\n    const invokers = el._vei || (el._vei = {});\r\n    const existingInvoker = invokers[rawName];\r\n    if (nextValue && existingInvoker) {\r\n        // patch\r\n        existingInvoker.value = nextValue;\r\n    }\r\n    else {\r\n        const [name, options] = parseName(rawName);\r\n        if (nextValue) {\r\n            // add\r\n            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));\r\n            addEventListener(el, name, invoker, options);\r\n        }\r\n        else if (existingInvoker) {\r\n            // remove\r\n            removeEventListener(el, name, existingInvoker, options);\r\n            invokers[rawName] = undefined;\r\n        }\r\n    }\r\n}\r\nconst optionsModifierRE = /(?:Once|Passive|Capture)$/;\r\nfunction parseName(name) {\r\n    let options;\r\n    if (optionsModifierRE.test(name)) {\r\n        options = {};\r\n        let m;\r\n        while ((m = name.match(optionsModifierRE))) {\r\n            name = name.slice(0, name.length - m[0].length);\r\n            options[m[0].toLowerCase()] = true;\r\n        }\r\n    }\r\n    return [hyphenate(name.slice(2)), options];\r\n}\r\nfunction createInvoker(initialValue, instance) {\r\n    const invoker = (e) => {\r\n        // async edge case #6566: inner click event triggers patch, event handler\r\n        // attached to outer element during patch, and triggered again. This\r\n        // happens because browsers fire microtask ticks between event propagation.\r\n        // the solution is simple: we save the timestamp when a handler is attached,\r\n        // and the handler would only fire if the event passed to it was fired\r\n        // AFTER it was attached.\r\n        const timeStamp = e.timeStamp || _getNow();\r\n        if (timeStamp >= invoker.attached - 1) {\r\n            callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */, [e]);\r\n        }\r\n    };\r\n    invoker.value = initialValue;\r\n    invoker.attached = getNow();\r\n    return invoker;\r\n}\r\nfunction patchStopImmediatePropagation(e, value) {\r\n    if (isArray(value)) {\r\n        const originalStop = e.stopImmediatePropagation;\r\n        e.stopImmediatePropagation = () => {\r\n            originalStop.call(e);\r\n            e._stopped = true;\r\n        };\r\n        return value.map(fn => (e) => !e._stopped && fn(e));\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\n\nconst nativeOnRE = /^on[a-z]/;\r\nconst forcePatchProp = (_, key) => key === 'value';\r\nconst patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {\r\n    switch (key) {\r\n        // special\r\n        case 'class':\r\n            patchClass(el, nextValue, isSVG);\r\n            break;\r\n        case 'style':\r\n            patchStyle(el, prevValue, nextValue);\r\n            break;\r\n        default:\r\n            if (isOn(key)) {\r\n                // ignore v-model listeners\r\n                if (!isModelListener(key)) {\r\n                    patchEvent(el, key, prevValue, nextValue, parentComponent);\r\n                }\r\n            }\r\n            else if (shouldSetAsProp(el, key, nextValue, isSVG)) {\r\n                patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\r\n            }\r\n            else {\r\n                // special case for <input v-model type=\"checkbox\"> with\r\n                // :true-value & :false-value\r\n                // store value as dom properties since non-string values will be\r\n                // stringified.\r\n                if (key === 'true-value') {\r\n                    el._trueValue = nextValue;\r\n                }\r\n                else if (key === 'false-value') {\r\n                    el._falseValue = nextValue;\r\n                }\r\n                patchAttr(el, key, nextValue, isSVG);\r\n            }\r\n            break;\r\n    }\r\n};\r\nfunction shouldSetAsProp(el, key, value, isSVG) {\r\n    if (isSVG) {\r\n        // most keys must be set as attribute on svg elements to work\r\n        // ...except innerHTML\r\n        if (key === 'innerHTML') {\r\n            return true;\r\n        }\r\n        // or native onclick with function values\r\n        if (key in el && nativeOnRE.test(key) && isFunction(value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // spellcheck and draggable are numerated attrs, however their\r\n    // corresponding DOM properties are actually booleans - this leads to\r\n    // setting it with a string \"false\" value leading it to be coerced to\r\n    // `true`, so we need to always treat them as attributes.\r\n    // Note that `contentEditable` doesn't have this problem: its DOM\r\n    // property is also enumerated string values.\r\n    if (key === 'spellcheck' || key === 'draggable') {\r\n        return false;\r\n    }\r\n    // #1787, #2840 form property on form elements is readonly and must be set as\r\n    // attribute.\r\n    if (key === 'form') {\r\n        return false;\r\n    }\r\n    // #1526 <input list> must be set as attribute\r\n    if (key === 'list' && el.tagName === 'INPUT') {\r\n        return false;\r\n    }\r\n    // #2766 <textarea type> must be set as attribute\r\n    if (key === 'type' && el.tagName === 'TEXTAREA') {\r\n        return false;\r\n    }\r\n    // native onclick with string value, must be set as attribute\r\n    if (nativeOnRE.test(key) && isString(value)) {\r\n        return false;\r\n    }\r\n    return key in el;\r\n}\n\nfunction useCssModule(name = '$style') {\r\n    /* istanbul ignore else */\r\n    {\r\n        const instance = getCurrentInstance();\r\n        if (!instance) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`useCssModule must be called inside setup()`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const modules = instance.type.__cssModules;\r\n        if (!modules) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`Current instance does not have CSS modules injected.`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const mod = modules[name];\r\n        if (!mod) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current instance does not have CSS module named \"${name}\".`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        return mod;\r\n    }\r\n}\n\n/**\r\n * Runtime helper for SFC's CSS variable injection feature.\r\n * @private\r\n */\r\nfunction useCssVars(getter) {\r\n    const instance = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!instance) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`useCssVars is called without current active component instance.`);\r\n        return;\r\n    }\r\n    const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));\r\n    onMounted(() => watchEffect(setVars, { flush: 'post' }));\r\n    onUpdated(setVars);\r\n}\r\nfunction setVarsOnVNode(vnode, vars) {\r\n    if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        const suspense = vnode.suspense;\r\n        vnode = suspense.activeBranch;\r\n        if (suspense.pendingBranch && !suspense.isHydrating) {\r\n            suspense.effects.push(() => {\r\n                setVarsOnVNode(suspense.activeBranch, vars);\r\n            });\r\n        }\r\n    }\r\n    // drill down HOCs until it's a non-component vnode\r\n    while (vnode.component) {\r\n        vnode = vnode.component.subTree;\r\n    }\r\n    if (vnode.shapeFlag & 1 /* ELEMENT */ && vnode.el) {\r\n        const style = vnode.el.style;\r\n        for (const key in vars) {\r\n            style.setProperty(`--${key}`, vars[key]);\r\n        }\r\n    }\r\n    else if (vnode.type === Fragment) {\r\n        vnode.children.forEach(c => setVarsOnVNode(c, vars));\r\n    }\r\n}\n\nconst TRANSITION = 'transition';\r\nconst ANIMATION = 'animation';\r\n// DOM Transition is a higher-order-component based on the platform-agnostic\r\n// base Transition component, with DOM-specific logic.\r\nconst Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);\r\nTransition.displayName = 'Transition';\r\nconst DOMTransitionPropsValidators = {\r\n    name: String,\r\n    type: String,\r\n    css: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n    duration: [String, Number, Object],\r\n    enterFromClass: String,\r\n    enterActiveClass: String,\r\n    enterToClass: String,\r\n    appearFromClass: String,\r\n    appearActiveClass: String,\r\n    appearToClass: String,\r\n    leaveFromClass: String,\r\n    leaveActiveClass: String,\r\n    leaveToClass: String\r\n};\r\nconst TransitionPropsValidators = (Transition.props = /*#__PURE__*/ extend({}, BaseTransition.props, DOMTransitionPropsValidators));\r\nfunction resolveTransitionProps(rawProps) {\r\n    let { name = 'v', type, css = true, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;\r\n    const baseProps = {};\r\n    for (const key in rawProps) {\r\n        if (!(key in DOMTransitionPropsValidators)) {\r\n            baseProps[key] = rawProps[key];\r\n        }\r\n    }\r\n    if (!css) {\r\n        return baseProps;\r\n    }\r\n    const durations = normalizeDuration(duration);\r\n    const enterDuration = durations && durations[0];\r\n    const leaveDuration = durations && durations[1];\r\n    const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;\r\n    const finishEnter = (el, isAppear, done) => {\r\n        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\r\n        done && done();\r\n    };\r\n    const finishLeave = (el, done) => {\r\n        removeTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveActiveClass);\r\n        done && done();\r\n    };\r\n    const makeEnterHook = (isAppear) => {\r\n        return (el, done) => {\r\n            const hook = isAppear ? onAppear : onEnter;\r\n            const resolve = () => finishEnter(el, isAppear, done);\r\n            hook && hook(el, resolve);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\r\n                addTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n                if (!(hook && hook.length > 1)) {\r\n                    whenTransitionEnds(el, type, enterDuration, resolve);\r\n                }\r\n            });\r\n        };\r\n    };\r\n    return extend(baseProps, {\r\n        onBeforeEnter(el) {\r\n            onBeforeEnter && onBeforeEnter(el);\r\n            addTransitionClass(el, enterFromClass);\r\n            addTransitionClass(el, enterActiveClass);\r\n        },\r\n        onBeforeAppear(el) {\r\n            onBeforeAppear && onBeforeAppear(el);\r\n            addTransitionClass(el, appearFromClass);\r\n            addTransitionClass(el, appearActiveClass);\r\n        },\r\n        onEnter: makeEnterHook(false),\r\n        onAppear: makeEnterHook(true),\r\n        onLeave(el, done) {\r\n            const resolve = () => finishLeave(el, done);\r\n            addTransitionClass(el, leaveFromClass);\r\n            // force reflow so *-leave-from classes immediately take effect (#2593)\r\n            forceReflow();\r\n            addTransitionClass(el, leaveActiveClass);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, leaveFromClass);\r\n                addTransitionClass(el, leaveToClass);\r\n                if (!(onLeave && onLeave.length > 1)) {\r\n                    whenTransitionEnds(el, type, leaveDuration, resolve);\r\n                }\r\n            });\r\n            onLeave && onLeave(el, resolve);\r\n        },\r\n        onEnterCancelled(el) {\r\n            finishEnter(el, false);\r\n            onEnterCancelled && onEnterCancelled(el);\r\n        },\r\n        onAppearCancelled(el) {\r\n            finishEnter(el, true);\r\n            onAppearCancelled && onAppearCancelled(el);\r\n        },\r\n        onLeaveCancelled(el) {\r\n            finishLeave(el);\r\n            onLeaveCancelled && onLeaveCancelled(el);\r\n        }\r\n    });\r\n}\r\nfunction normalizeDuration(duration) {\r\n    if (duration == null) {\r\n        return null;\r\n    }\r\n    else if (isObject(duration)) {\r\n        return [NumberOf(duration.enter), NumberOf(duration.leave)];\r\n    }\r\n    else {\r\n        const n = NumberOf(duration);\r\n        return [n, n];\r\n    }\r\n}\r\nfunction NumberOf(val) {\r\n    const res = toNumber(val);\r\n    if ((process.env.NODE_ENV !== 'production'))\r\n        validateDuration(res);\r\n    return res;\r\n}\r\nfunction validateDuration(val) {\r\n    if (typeof val !== 'number') {\r\n        warn(`<transition> explicit duration is not a valid number - ` +\r\n            `got ${JSON.stringify(val)}.`);\r\n    }\r\n    else if (isNaN(val)) {\r\n        warn(`<transition> explicit duration is NaN - ` +\r\n            'the duration expression might be incorrect.');\r\n    }\r\n}\r\nfunction addTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.add(c));\r\n    (el._vtc ||\r\n        (el._vtc = new Set())).add(cls);\r\n}\r\nfunction removeTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.remove(c));\r\n    const { _vtc } = el;\r\n    if (_vtc) {\r\n        _vtc.delete(cls);\r\n        if (!_vtc.size) {\r\n            el._vtc = undefined;\r\n        }\r\n    }\r\n}\r\nfunction nextFrame(cb) {\r\n    requestAnimationFrame(() => {\r\n        requestAnimationFrame(cb);\r\n    });\r\n}\r\nlet endId = 0;\r\nfunction whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {\r\n    const id = (el._endId = ++endId);\r\n    const resolveIfNotStale = () => {\r\n        if (id === el._endId) {\r\n            resolve();\r\n        }\r\n    };\r\n    if (explicitTimeout) {\r\n        return setTimeout(resolveIfNotStale, explicitTimeout);\r\n    }\r\n    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);\r\n    if (!type) {\r\n        return resolve();\r\n    }\r\n    const endEvent = type + 'end';\r\n    let ended = 0;\r\n    const end = () => {\r\n        el.removeEventListener(endEvent, onEnd);\r\n        resolveIfNotStale();\r\n    };\r\n    const onEnd = (e) => {\r\n        if (e.target === el && ++ended >= propCount) {\r\n            end();\r\n        }\r\n    };\r\n    setTimeout(() => {\r\n        if (ended < propCount) {\r\n            end();\r\n        }\r\n    }, timeout + 1);\r\n    el.addEventListener(endEvent, onEnd);\r\n}\r\nfunction getTransitionInfo(el, expectedType) {\r\n    const styles = window.getComputedStyle(el);\r\n    // JSDOM may return undefined for transition properties\r\n    const getStyleProperties = (key) => (styles[key] || '').split(', ');\r\n    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');\r\n    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');\r\n    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n    const animationDelays = getStyleProperties(ANIMATION + 'Delay');\r\n    const animationDurations = getStyleProperties(ANIMATION + 'Duration');\r\n    const animationTimeout = getTimeout(animationDelays, animationDurations);\r\n    let type = null;\r\n    let timeout = 0;\r\n    let propCount = 0;\r\n    /* istanbul ignore if */\r\n    if (expectedType === TRANSITION) {\r\n        if (transitionTimeout > 0) {\r\n            type = TRANSITION;\r\n            timeout = transitionTimeout;\r\n            propCount = transitionDurations.length;\r\n        }\r\n    }\r\n    else if (expectedType === ANIMATION) {\r\n        if (animationTimeout > 0) {\r\n            type = ANIMATION;\r\n            timeout = animationTimeout;\r\n            propCount = animationDurations.length;\r\n        }\r\n    }\r\n    else {\r\n        timeout = Math.max(transitionTimeout, animationTimeout);\r\n        type =\r\n            timeout > 0\r\n                ? transitionTimeout > animationTimeout\r\n                    ? TRANSITION\r\n                    : ANIMATION\r\n                : null;\r\n        propCount = type\r\n            ? type === TRANSITION\r\n                ? transitionDurations.length\r\n                : animationDurations.length\r\n            : 0;\r\n    }\r\n    const hasTransform = type === TRANSITION &&\r\n        /\\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);\r\n    return {\r\n        type,\r\n        timeout,\r\n        propCount,\r\n        hasTransform\r\n    };\r\n}\r\nfunction getTimeout(delays, durations) {\r\n    while (delays.length < durations.length) {\r\n        delays = delays.concat(delays);\r\n    }\r\n    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));\r\n}\r\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer\r\n// numbers in a locale-dependent way, using a comma instead of a dot.\r\n// If comma is not replaced with a dot, the input will be rounded down\r\n// (i.e. acting as a floor function) causing unexpected behaviors\r\nfunction toMs(s) {\r\n    return Number(s.slice(0, -1).replace(',', '.')) * 1000;\r\n}\r\n// synchronously force layout to put elements into a certain state\r\nfunction forceReflow() {\r\n    return document.body.offsetHeight;\r\n}\n\nconst positionMap = new WeakMap();\r\nconst newPositionMap = new WeakMap();\r\nconst TransitionGroupImpl = {\r\n    name: 'TransitionGroup',\r\n    props: /*#__PURE__*/ extend({}, TransitionPropsValidators, {\r\n        tag: String,\r\n        moveClass: String\r\n    }),\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevChildren;\r\n        let children;\r\n        onUpdated(() => {\r\n            // children is guaranteed to exist after initial render\r\n            if (!prevChildren.length) {\r\n                return;\r\n            }\r\n            const moveClass = props.moveClass || `${props.name || 'v'}-move`;\r\n            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\r\n                return;\r\n            }\r\n            // we divide the work into three loops to avoid mixing DOM reads and writes\r\n            // in each iteration - which helps prevent layout thrashing.\r\n            prevChildren.forEach(callPendingCbs);\r\n            prevChildren.forEach(recordPosition);\r\n            const movedChildren = prevChildren.filter(applyTranslation);\r\n            // force reflow to put everything in position\r\n            forceReflow();\r\n            movedChildren.forEach(c => {\r\n                const el = c.el;\r\n                const style = el.style;\r\n                addTransitionClass(el, moveClass);\r\n                style.transform = style.webkitTransform = style.transitionDuration = '';\r\n                const cb = (el._moveCb = (e) => {\r\n                    if (e && e.target !== el) {\r\n                        return;\r\n                    }\r\n                    if (!e || /transform$/.test(e.propertyName)) {\r\n                        el.removeEventListener('transitionend', cb);\r\n                        el._moveCb = null;\r\n                        removeTransitionClass(el, moveClass);\r\n                    }\r\n                });\r\n                el.addEventListener('transitionend', cb);\r\n            });\r\n        });\r\n        return () => {\r\n            const rawProps = toRaw(props);\r\n            const cssTransitionProps = resolveTransitionProps(rawProps);\r\n            const tag = rawProps.tag || Fragment;\r\n            prevChildren = children;\r\n            children = slots.default ? getTransitionRawChildren(slots.default()) : [];\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (child.key != null) {\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`<TransitionGroup> children must be keyed.`);\r\n                }\r\n            }\r\n            if (prevChildren) {\r\n                for (let i = 0; i < prevChildren.length; i++) {\r\n                    const child = prevChildren[i];\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                    positionMap.set(child, child.el.getBoundingClientRect());\r\n                }\r\n            }\r\n            return createVNode(tag, null, children);\r\n        };\r\n    }\r\n};\r\nconst TransitionGroup = TransitionGroupImpl;\r\nfunction callPendingCbs(c) {\r\n    const el = c.el;\r\n    if (el._moveCb) {\r\n        el._moveCb();\r\n    }\r\n    if (el._enterCb) {\r\n        el._enterCb();\r\n    }\r\n}\r\nfunction recordPosition(c) {\r\n    newPositionMap.set(c, c.el.getBoundingClientRect());\r\n}\r\nfunction applyTranslation(c) {\r\n    const oldPos = positionMap.get(c);\r\n    const newPos = newPositionMap.get(c);\r\n    const dx = oldPos.left - newPos.left;\r\n    const dy = oldPos.top - newPos.top;\r\n    if (dx || dy) {\r\n        const s = c.el.style;\r\n        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;\r\n        s.transitionDuration = '0s';\r\n        return c;\r\n    }\r\n}\r\nfunction hasCSSTransform(el, root, moveClass) {\r\n    // Detect whether an element with the move class applied has\r\n    // CSS transitions. Since the element may be inside an entering\r\n    // transition at this very moment, we make a clone of it and remove\r\n    // all other transition classes applied to ensure only the move class\r\n    // is applied.\r\n    const clone = el.cloneNode();\r\n    if (el._vtc) {\r\n        el._vtc.forEach(cls => {\r\n            cls.split(/\\s+/).forEach(c => c && clone.classList.remove(c));\r\n        });\r\n    }\r\n    moveClass.split(/\\s+/).forEach(c => c && clone.classList.add(c));\r\n    clone.style.display = 'none';\r\n    const container = (root.nodeType === 1\r\n        ? root\r\n        : root.parentNode);\r\n    container.appendChild(clone);\r\n    const { hasTransform } = getTransitionInfo(clone);\r\n    container.removeChild(clone);\r\n    return hasTransform;\r\n}\n\nconst getModelAssigner = (vnode) => {\r\n    const fn = vnode.props['onUpdate:modelValue'];\r\n    return isArray(fn) ? value => invokeArrayFns(fn, value) : fn;\r\n};\r\nfunction onCompositionStart(e) {\r\n    e.target.composing = true;\r\n}\r\nfunction onCompositionEnd(e) {\r\n    const target = e.target;\r\n    if (target.composing) {\r\n        target.composing = false;\r\n        trigger(target, 'input');\r\n    }\r\n}\r\nfunction trigger(el, type) {\r\n    const e = document.createEvent('HTMLEvents');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n}\r\n// We are exporting the v-model runtime directly as vnode hooks so that it can\r\n// be tree-shaken in case v-model is never used.\r\nconst vModelText = {\r\n    created(el, { modifiers: { lazy, trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        const castToNumber = number || el.type === 'number';\r\n        addEventListener(el, lazy ? 'change' : 'input', e => {\r\n            if (e.target.composing)\r\n                return;\r\n            let domValue = el.value;\r\n            if (trim) {\r\n                domValue = domValue.trim();\r\n            }\r\n            else if (castToNumber) {\r\n                domValue = toNumber(domValue);\r\n            }\r\n            el._assign(domValue);\r\n        });\r\n        if (trim) {\r\n            addEventListener(el, 'change', () => {\r\n                el.value = el.value.trim();\r\n            });\r\n        }\r\n        if (!lazy) {\r\n            addEventListener(el, 'compositionstart', onCompositionStart);\r\n            addEventListener(el, 'compositionend', onCompositionEnd);\r\n            // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n            // switching focus before confirming composition choice\r\n            // this also fixes the issue where some browsers e.g. iOS Chrome\r\n            // fires \"change\" instead of \"input\" on autocomplete.\r\n            addEventListener(el, 'change', onCompositionEnd);\r\n        }\r\n    },\r\n    // set value on mounted so it's after min/max for type=\"range\"\r\n    mounted(el, { value }) {\r\n        el.value = value == null ? '' : value;\r\n    },\r\n    beforeUpdate(el, { value, modifiers: { trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        // avoid clearing unresolved text. #2302\r\n        if (el.composing)\r\n            return;\r\n        if (document.activeElement === el) {\r\n            if (trim && el.value.trim() === value) {\r\n                return;\r\n            }\r\n            if ((number || el.type === 'number') && toNumber(el.value) === value) {\r\n                return;\r\n            }\r\n        }\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n    }\r\n};\r\nconst vModelCheckbox = {\r\n    created(el, _, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            const modelValue = el._modelValue;\r\n            const elementValue = getValue(el);\r\n            const checked = el.checked;\r\n            const assign = el._assign;\r\n            if (isArray(modelValue)) {\r\n                const index = looseIndexOf(modelValue, elementValue);\r\n                const found = index !== -1;\r\n                if (checked && !found) {\r\n                    assign(modelValue.concat(elementValue));\r\n                }\r\n                else if (!checked && found) {\r\n                    const filtered = [...modelValue];\r\n                    filtered.splice(index, 1);\r\n                    assign(filtered);\r\n                }\r\n            }\r\n            else if (isSet(modelValue)) {\r\n                const cloned = new Set(modelValue);\r\n                if (checked) {\r\n                    cloned.add(elementValue);\r\n                }\r\n                else {\r\n                    cloned.delete(elementValue);\r\n                }\r\n                assign(cloned);\r\n            }\r\n            else {\r\n                assign(getCheckboxValue(el, checked));\r\n            }\r\n        });\r\n    },\r\n    // set initial checked on mount to wait for true-value/false-value\r\n    mounted: setChecked,\r\n    beforeUpdate(el, binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        setChecked(el, binding, vnode);\r\n    }\r\n};\r\nfunction setChecked(el, { value, oldValue }, vnode) {\r\n    el._modelValue = value;\r\n    if (isArray(value)) {\r\n        el.checked = looseIndexOf(value, vnode.props.value) > -1;\r\n    }\r\n    else if (isSet(value)) {\r\n        el.checked = value.has(vnode.props.value);\r\n    }\r\n    else if (value !== oldValue) {\r\n        el.checked = looseEqual(value, getCheckboxValue(el, true));\r\n    }\r\n}\r\nconst vModelRadio = {\r\n    created(el, { value }, vnode) {\r\n        el.checked = looseEqual(value, vnode.props.value);\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            el._assign(getValue(el));\r\n        });\r\n    },\r\n    beforeUpdate(el, { value, oldValue }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        if (value !== oldValue) {\r\n            el.checked = looseEqual(value, vnode.props.value);\r\n        }\r\n    }\r\n};\r\nconst vModelSelect = {\r\n    created(el, { value, modifiers: { number } }, vnode) {\r\n        const isSetModel = isSet(value);\r\n        addEventListener(el, 'change', () => {\r\n            const selectedVal = Array.prototype.filter\r\n                .call(el.options, (o) => o.selected)\r\n                .map((o) => number ? toNumber(getValue(o)) : getValue(o));\r\n            el._assign(el.multiple\r\n                ? isSetModel\r\n                    ? new Set(selectedVal)\r\n                    : selectedVal\r\n                : selectedVal[0]);\r\n        });\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    // set value in mounted & updated because <select> relies on its children\r\n    // <option>s.\r\n    mounted(el, { value }) {\r\n        setSelected(el, value);\r\n    },\r\n    beforeUpdate(el, _binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    updated(el, { value }) {\r\n        setSelected(el, value);\r\n    }\r\n};\r\nfunction setSelected(el, value) {\r\n    const isMultiple = el.multiple;\r\n    if (isMultiple && !isArray(value) && !isSet(value)) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`<select multiple v-model> expects an Array or Set value for its binding, ` +\r\n                `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);\r\n        return;\r\n    }\r\n    for (let i = 0, l = el.options.length; i < l; i++) {\r\n        const option = el.options[i];\r\n        const optionValue = getValue(option);\r\n        if (isMultiple) {\r\n            if (isArray(value)) {\r\n                option.selected = looseIndexOf(value, optionValue) > -1;\r\n            }\r\n            else {\r\n                option.selected = value.has(optionValue);\r\n            }\r\n        }\r\n        else {\r\n            if (looseEqual(getValue(option), value)) {\r\n                el.selectedIndex = i;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (!isMultiple) {\r\n        el.selectedIndex = -1;\r\n    }\r\n}\r\n// retrieve raw value set via :value bindings\r\nfunction getValue(el) {\r\n    return '_value' in el ? el._value : el.value;\r\n}\r\n// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings\r\nfunction getCheckboxValue(el, checked) {\r\n    const key = checked ? '_trueValue' : '_falseValue';\r\n    return key in el ? el[key] : checked;\r\n}\r\nconst vModelDynamic = {\r\n    created(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'created');\r\n    },\r\n    mounted(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'mounted');\r\n    },\r\n    beforeUpdate(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');\r\n    },\r\n    updated(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'updated');\r\n    }\r\n};\r\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\r\n    let modelToUse;\r\n    switch (el.tagName) {\r\n        case 'SELECT':\r\n            modelToUse = vModelSelect;\r\n            break;\r\n        case 'TEXTAREA':\r\n            modelToUse = vModelText;\r\n            break;\r\n        default:\r\n            switch (vnode.props && vnode.props.type) {\r\n                case 'checkbox':\r\n                    modelToUse = vModelCheckbox;\r\n                    break;\r\n                case 'radio':\r\n                    modelToUse = vModelRadio;\r\n                    break;\r\n                default:\r\n                    modelToUse = vModelText;\r\n            }\r\n    }\r\n    const fn = modelToUse[hook];\r\n    fn && fn(el, binding, vnode, prevVNode);\r\n}\n\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => 'button' in e && e.button !== 0,\r\n    middle: e => 'button' in e && e.button !== 1,\r\n    right: e => 'button' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withModifiers = (fn, modifiers) => {\r\n    return (event, ...args) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event, ...args);\r\n    };\r\n};\r\n// Kept for 2.x compat.\r\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\r\nconst keyNames = {\r\n    esc: 'escape',\r\n    space: ' ',\r\n    up: 'arrow-up',\r\n    left: 'arrow-left',\r\n    right: 'arrow-right',\r\n    down: 'arrow-down',\r\n    delete: 'backspace'\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withKeys = (fn, modifiers) => {\r\n    return (event) => {\r\n        if (!('key' in event))\r\n            return;\r\n        const eventKey = hyphenate(event.key);\r\n        if (\r\n        // None of the provided key modifiers match the current event key\r\n        !modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\r\n            return;\r\n        }\r\n        return fn(event);\r\n    };\r\n};\n\nconst vShow = {\r\n    beforeMount(el, { value }, { transition }) {\r\n        el._vod = el.style.display === 'none' ? '' : el.style.display;\r\n        if (transition && value) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    mounted(el, { value }, { transition }) {\r\n        if (transition && value) {\r\n            transition.enter(el);\r\n        }\r\n    },\r\n    updated(el, { value, oldValue }, { transition }) {\r\n        if (!value === !oldValue)\r\n            return;\r\n        if (transition) {\r\n            if (value) {\r\n                transition.beforeEnter(el);\r\n                setDisplay(el, true);\r\n                transition.enter(el);\r\n            }\r\n            else {\r\n                transition.leave(el, () => {\r\n                    setDisplay(el, false);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    beforeUnmount(el, { value }) {\r\n        setDisplay(el, value);\r\n    }\r\n};\r\nfunction setDisplay(el, value) {\r\n    el.style.display = value ? el._vod : 'none';\r\n}\n\nconst rendererOptions = extend({ patchProp, forcePatchProp }, nodeOps);\r\n// lazy create the renderer - this makes core renderer logic tree-shakable\r\n// in case the user only imports reactivity utilities from Vue.\r\nlet renderer;\r\nlet enabledHydration = false;\r\nfunction ensureRenderer() {\r\n    return renderer || (renderer = createRenderer(rendererOptions));\r\n}\r\nfunction ensureHydrationRenderer() {\r\n    renderer = enabledHydration\r\n        ? renderer\r\n        : createHydrationRenderer(rendererOptions);\r\n    enabledHydration = true;\r\n    return renderer;\r\n}\r\n// use explicit type casts here to avoid import() calls in rolled-up d.ts\r\nconst render = ((...args) => {\r\n    ensureRenderer().render(...args);\r\n});\r\nconst hydrate = ((...args) => {\r\n    ensureHydrationRenderer().hydrate(...args);\r\n});\r\nconst createApp = ((...args) => {\r\n    const app = ensureRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n        injectCustomElementCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (!container)\r\n            return;\r\n        const component = app._component;\r\n        if (!isFunction(component) && !component.render && !component.template) {\r\n            component.template = container.innerHTML;\r\n        }\r\n        // clear content before mounting\r\n        container.innerHTML = '';\r\n        const proxy = mount(container);\r\n        if (container instanceof Element) {\r\n            container.removeAttribute('v-cloak');\r\n            container.setAttribute('data-v-app', '');\r\n        }\r\n        return proxy;\r\n    };\r\n    return app;\r\n});\r\nconst createSSRApp = ((...args) => {\r\n    const app = ensureHydrationRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n        injectCustomElementCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (container) {\r\n            return mount(container, true);\r\n        }\r\n    };\r\n    return app;\r\n});\r\nfunction injectNativeTagCheck(app) {\r\n    // Inject `isNativeTag`\r\n    // this is used for component name validation (dev only)\r\n    Object.defineProperty(app.config, 'isNativeTag', {\r\n        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),\r\n        writable: false\r\n    });\r\n}\r\n// dev only\r\nfunction injectCustomElementCheck(app) {\r\n    if (isRuntimeOnly()) {\r\n        const value = app.config.isCustomElement;\r\n        Object.defineProperty(app.config, 'isCustomElement', {\r\n            get() {\r\n                return value;\r\n            },\r\n            set() {\r\n                warn(`The \\`isCustomElement\\` config option is only respected when using the runtime compiler.` +\r\n                    `If you are using the runtime-only build, \\`isCustomElement\\` must be passed to \\`@vue/compiler-dom\\` in the build setup instead` +\r\n                    `- for example, via the \\`compilerOptions\\` option in vue-loader: https://vue-loader.vuejs.org/options.html#compileroptions.`);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction normalizeContainer(container) {\r\n    if (isString(container)) {\r\n        const res = document.querySelector(container);\r\n        if ((process.env.NODE_ENV !== 'production') && !res) {\r\n            warn(`Failed to mount app: mount target selector \"${container}\" returned null.`);\r\n        }\r\n        return res;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        container instanceof window.ShadowRoot &&\r\n        container.mode === 'closed') {\r\n        warn(`mounting on a ShadowRoot with \\`{mode: \"closed\"}\\` may lead to unpredictable bugs`);\r\n    }\r\n    return container;\r\n}\n\nexport { Transition, TransitionGroup, createApp, createSSRApp, hydrate, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers };\n", "/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nfunction makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(',');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\r\n}\n\n/**\r\n * dev only flag -> name mapping\r\n */\r\nconst PatchFlagNames = {\r\n    [1 /* TEXT */]: `TEXT`,\r\n    [2 /* CLASS */]: `CLASS`,\r\n    [4 /* STYLE */]: `STYLE`,\r\n    [8 /* PROPS */]: `PROPS`,\r\n    [16 /* FULL_PROPS */]: `FULL_PROPS`,\r\n    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,\r\n    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,\r\n    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,\r\n    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,\r\n    [512 /* NEED_PATCH */]: `NEED_PATCH`,\r\n    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,\r\n    [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,\r\n    [-1 /* HOISTED */]: `HOISTED`,\r\n    [-2 /* BAIL */]: `BAIL`\r\n};\n\n/**\r\n * Dev only\r\n */\r\nconst slotFlagsText = {\r\n    [1 /* STABLE */]: 'STABLE',\r\n    [2 /* DYNAMIC */]: 'DYNAMIC',\r\n    [3 /* FORWARDED */]: 'FORWARDED'\r\n};\n\nconst GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +\r\n    'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +\r\n    'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt';\r\nconst isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);\n\nconst range = 2;\r\nfunction generateCodeFrame(source, start = 0, end = source.length) {\r\n    const lines = source.split(/\\r?\\n/);\r\n    let count = 0;\r\n    const res = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        count += lines[i].length + 1;\r\n        if (count >= start) {\r\n            for (let j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                const line = j + 1;\r\n                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);\r\n                const lineLength = lines[j].length;\r\n                if (j === i) {\r\n                    // push underline\r\n                    const pad = start - (count - lineLength) + 1;\r\n                    const length = Math.max(1, end > count ? lineLength - pad : end - start);\r\n                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        const length = Math.max(Math.min(end - count, lineLength), 1);\r\n                        res.push(`   |  ` + '^'.repeat(length));\r\n                    }\r\n                    count += lineLength + 1;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join('\\n');\r\n}\n\n/**\r\n * On the client we only need to offer special cases for boolean attributes that\r\n * have different names from their corresponding dom properties:\r\n * - itemscope -> N/A\r\n * - allowfullscreen -> allowFullscreen\r\n * - formnovalidate -> formNoValidate\r\n * - ismap -> isMap\r\n * - nomodule -> noModule\r\n * - novalidate -> noValidate\r\n * - readonly -> readOnly\r\n */\r\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\r\nconst isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);\r\n/**\r\n * The full list is needed during SSR to produce the correct initial markup.\r\n */\r\nconst isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs +\r\n    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +\r\n    `loop,open,required,reversed,scoped,seamless,` +\r\n    `checked,muted,multiple,selected`);\r\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/;\r\nconst attrValidationCache = {};\r\nfunction isSSRSafeAttrName(name) {\r\n    if (attrValidationCache.hasOwnProperty(name)) {\r\n        return attrValidationCache[name];\r\n    }\r\n    const isUnsafe = unsafeAttrCharRE.test(name);\r\n    if (isUnsafe) {\r\n        console.error(`unsafe attribute name: ${name}`);\r\n    }\r\n    return (attrValidationCache[name] = !isUnsafe);\r\n}\r\nconst propsToAttrMap = {\r\n    acceptCharset: 'accept-charset',\r\n    className: 'class',\r\n    htmlFor: 'for',\r\n    httpEquiv: 'http-equiv'\r\n};\r\n/**\r\n * CSS properties that accept plain numbers\r\n */\r\nconst isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +\r\n    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +\r\n    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +\r\n    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +\r\n    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +\r\n    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +\r\n    // SVG\r\n    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width`);\r\n/**\r\n * Known attributes, this is used for stringification of runtime static nodes\r\n * so that we don't stringify bindings that cannot be set from HTML.\r\n * Don't also forget to allow `data-*` and `aria-*`!\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\r\n */\r\nconst isKnownAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +\r\n    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +\r\n    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +\r\n    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +\r\n    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +\r\n    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +\r\n    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +\r\n    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +\r\n    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +\r\n    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +\r\n    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +\r\n    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +\r\n    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +\r\n    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +\r\n    `value,width,wrap`);\n\nfunction normalizeStyle(value) {\r\n    if (isArray(value)) {\r\n        const res = {};\r\n        for (let i = 0; i < value.length; i++) {\r\n            const item = value[i];\r\n            const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);\r\n            if (normalized) {\r\n                for (const key in normalized) {\r\n                    res[key] = normalized[key];\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    else if (isObject(value)) {\r\n        return value;\r\n    }\r\n}\r\nconst listDelimiterRE = /;(?![^(]*\\))/g;\r\nconst propertyDelimiterRE = /:(.+)/;\r\nfunction parseStringStyle(cssText) {\r\n    const ret = {};\r\n    cssText.split(listDelimiterRE).forEach(item => {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiterRE);\r\n            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return ret;\r\n}\r\nfunction stringifyStyle(styles) {\r\n    let ret = '';\r\n    if (!styles) {\r\n        return ret;\r\n    }\r\n    for (const key in styles) {\r\n        const value = styles[key];\r\n        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\r\n        if (isString(value) ||\r\n            (typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey))) {\r\n            // only render valid values\r\n            ret += `${normalizedKey}:${value};`;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nfunction normalizeClass(value) {\r\n    let res = '';\r\n    if (isString(value)) {\r\n        res = value;\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const normalized = normalizeClass(value[i]);\r\n            if (normalized) {\r\n                res += normalized + ' ';\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(value)) {\r\n        for (const name in value) {\r\n            if (value[name]) {\r\n                res += name + ' ';\r\n            }\r\n        }\r\n    }\r\n    return res.trim();\r\n}\n\n// These tag configs are shared between compiler-dom and runtime-dom, so they\r\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\nconst HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' +\r\n    'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' +\r\n    'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' +\r\n    'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' +\r\n    'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' +\r\n    'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' +\r\n    'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' +\r\n    'option,output,progress,select,textarea,details,dialog,menu,' +\r\n    'summary,template,blockquote,iframe,tfoot';\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element\r\nconst SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' +\r\n    'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' +\r\n    'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' +\r\n    'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' +\r\n    'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' +\r\n    'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' +\r\n    'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' +\r\n    'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' +\r\n    'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' +\r\n    'text,textPath,title,tspan,unknown,use,view';\r\nconst VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';\r\nconst isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);\r\nconst isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);\r\nconst isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);\n\nconst escapeRE = /[\"'&<>]/;\r\nfunction escapeHtml(string) {\r\n    const str = '' + string;\r\n    const match = escapeRE.exec(str);\r\n    if (!match) {\r\n        return str;\r\n    }\r\n    let html = '';\r\n    let escaped;\r\n    let index;\r\n    let lastIndex = 0;\r\n    for (index = match.index; index < str.length; index++) {\r\n        switch (str.charCodeAt(index)) {\r\n            case 34: // \"\r\n                escaped = '&quot;';\r\n                break;\r\n            case 38: // &\r\n                escaped = '&amp;';\r\n                break;\r\n            case 39: // '\r\n                escaped = '&#39;';\r\n                break;\r\n            case 60: // <\r\n                escaped = '&lt;';\r\n                break;\r\n            case 62: // >\r\n                escaped = '&gt;';\r\n                break;\r\n            default:\r\n                continue;\r\n        }\r\n        if (lastIndex !== index) {\r\n            html += str.substring(lastIndex, index);\r\n        }\r\n        lastIndex = index + 1;\r\n        html += escaped;\r\n    }\r\n    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\r\n}\r\n// https://www.w3.org/TR/html52/syntax.html#comments\r\nconst commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;\r\nfunction escapeHtmlComment(src) {\r\n    return src.replace(commentStripRE, '');\r\n}\n\nfunction looseCompareArrays(a, b) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    let equal = true;\r\n    for (let i = 0; equal && i < a.length; i++) {\r\n        equal = looseEqual(a[i], b[i]);\r\n    }\r\n    return equal;\r\n}\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    let aValidType = isDate(a);\r\n    let bValidType = isDate(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? a.getTime() === b.getTime() : false;\r\n    }\r\n    aValidType = isArray(a);\r\n    bValidType = isArray(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? looseCompareArrays(a, b) : false;\r\n    }\r\n    aValidType = isObject(a);\r\n    bValidType = isObject(b);\r\n    if (aValidType || bValidType) {\r\n        /* istanbul ignore if: this if will probably never be called */\r\n        if (!aValidType || !bValidType) {\r\n            return false;\r\n        }\r\n        const aKeysCount = Object.keys(a).length;\r\n        const bKeysCount = Object.keys(b).length;\r\n        if (aKeysCount !== bKeysCount) {\r\n            return false;\r\n        }\r\n        for (const key in a) {\r\n            const aHasKey = a.hasOwnProperty(key);\r\n            const bHasKey = b.hasOwnProperty(key);\r\n            if ((aHasKey && !bHasKey) ||\r\n                (!aHasKey && bHasKey) ||\r\n                !looseEqual(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return String(a) === String(b);\r\n}\r\nfunction looseIndexOf(arr, val) {\r\n    return arr.findIndex(item => looseEqual(item, val));\r\n}\n\n/**\r\n * For converting {{ interpolation }} values to displayed strings.\r\n * @private\r\n */\r\nconst toDisplayString = (val) => {\r\n    return val == null\r\n        ? ''\r\n        : isObject(val)\r\n            ? JSON.stringify(val, replacer, 2)\r\n            : String(val);\r\n};\r\nconst replacer = (_key, val) => {\r\n    if (isMap(val)) {\r\n        return {\r\n            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {\r\n                entries[`${key} =>`] = val;\r\n                return entries;\r\n            }, {})\r\n        };\r\n    }\r\n    else if (isSet(val)) {\r\n        return {\r\n            [`Set(${val.size})`]: [...val.values()]\r\n        };\r\n    }\r\n    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {\r\n        return String(val);\r\n    }\r\n    return val;\r\n};\n\n/**\r\n * List of @babel/parser plugins that are used for template expression\r\n * transforms and SFC script transforms. By default we enable proposals slated\r\n * for ES2020. This will need to be updated as the spec moves forward.\r\n * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins\r\n */\r\nconst babelParserDefaultPlugins = [\r\n    'bigInt',\r\n    'optionalChaining',\r\n    'nullishCoalescingOperator'\r\n];\r\nconst EMPTY_OBJ = (process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\nconst EMPTY_ARR = (process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nconst NO = () => false;\r\nconst onRE = /^on[^a-z]/;\r\nconst isOn = (key) => onRE.test(key);\r\nconst isModelListener = (key) => key.startsWith('onUpdate:');\r\nconst extend = Object.assign;\r\nconst remove = (arr, el) => {\r\n    const i = arr.indexOf(el);\r\n    if (i > -1) {\r\n        arr.splice(i, 1);\r\n    }\r\n};\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nconst isArray = Array.isArray;\r\nconst isMap = (val) => toTypeString(val) === '[object Map]';\r\nconst isSet = (val) => toTypeString(val) === '[object Set]';\r\nconst isDate = (val) => val instanceof Date;\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isString = (val) => typeof val === 'string';\r\nconst isSymbol = (val) => typeof val === 'symbol';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nconst isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value) => objectToString.call(value);\r\nconst toRawType = (value) => {\r\n    // extract \"RawType\" from strings like \"[object RawType]\"\r\n    return toTypeString(value).slice(8, -1);\r\n};\r\nconst isPlainObject = (val) => toTypeString(val) === '[object Object]';\r\nconst isIntegerKey = (key) => isString(key) &&\r\n    key !== 'NaN' &&\r\n    key[0] !== '-' &&\r\n    '' + parseInt(key, 10) === key;\r\nconst isReservedProp = /*#__PURE__*/ makeMap(\r\n// the leading comma is intentional so empty string \"\" is also included\r\n',key,ref,' +\r\n    'onVnodeBeforeMount,onVnodeMounted,' +\r\n    'onVnodeBeforeUpdate,onVnodeUpdated,' +\r\n    'onVnodeBeforeUnmount,onVnodeUnmounted');\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n});\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nconst hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, '-$1').toLowerCase());\r\n/**\r\n * @private\r\n */\r\nconst capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\n/**\r\n * @private\r\n */\r\nconst toHandlerKey = cacheStringFunction((str) => (str ? `on${capitalize(str)}` : ``));\r\n// compare whether a value has changed, accounting for NaN.\r\nconst hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\r\nconst invokeArrayFns = (fns, arg) => {\r\n    for (let i = 0; i < fns.length; i++) {\r\n        fns[i](arg);\r\n    }\r\n};\r\nconst def = (obj, key, value) => {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value\r\n    });\r\n};\r\nconst toNumber = (val) => {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n};\r\nlet _globalThis;\r\nconst getGlobalThis = () => {\r\n    return (_globalThis ||\r\n        (_globalThis =\r\n            typeof globalThis !== 'undefined'\r\n                ? globalThis\r\n                : typeof self !== 'undefined'\r\n                    ? self\r\n                    : typeof window !== 'undefined'\r\n                        ? window\r\n                        : typeof global !== 'undefined'\r\n                            ? global\r\n                            : {}));\r\n};\n\nexport { EMPTY_ARR, EMPTY_OBJ, NO, NOOP, PatchFlagNames, babelParserDefaultPlugins, camelize, capitalize, def, escapeHtml, escapeHtmlComment, extend, generateCodeFrame, getGlobalThis, hasChanged, hasOwn, hyphenate, invokeArrayFns, isArray, isBooleanAttr, isDate, isFunction, isGloballyWhitelisted, isHTMLTag, isIntegerKey, isKnownAttr, isMap, isModelListener, isNoUnitNumericStyleProp, isObject, isOn, isPlainObject, isPromise, isReservedProp, isSSRSafeAttrName, isSVGTag, isSet, isSpecialBooleanAttr, isString, isSymbol, isVoidTag, looseEqual, looseIndexOf, makeMap, normalizeClass, normalizeStyle, objectToString, parseStringStyle, propsToAttrMap, remove, slotFlagsText, stringifyStyle, toDisplayString, toHandlerKey, toNumber, toRawType, toTypeString };\n", "import { isString, hyphenate, extend, isObject, isArray, NO, makeMap, isSymbol, NOOP, EMPTY_OBJ, capitalize, camelize as camelize$1, PatchFlagNames, slotFlagsText, isOn, isReservedProp, toHandlerKey } from '@vue/shared';\nexport { generateCodeFrame } from '@vue/shared';\n\nfunction defaultOnError(error) {\r\n    throw error;\r\n}\r\nfunction createCompilerError(code, loc, messages, additionalMessage) {\r\n    const msg = (process.env.NODE_ENV !== 'production') || !true\r\n        ? (messages || errorMessages)[code] + (additionalMessage || ``)\r\n        : code;\r\n    const error = new SyntaxError(String(msg));\r\n    error.code = code;\r\n    error.loc = loc;\r\n    return error;\r\n}\r\nconst errorMessages = {\r\n    // parse errors\r\n    [0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */]: 'Illegal comment.',\r\n    [1 /* CDATA_IN_HTML_CONTENT */]: 'CDATA section is allowed only in XML context.',\r\n    [2 /* DUPLICATE_ATTRIBUTE */]: 'Duplicate attribute.',\r\n    [3 /* END_TAG_WITH_ATTRIBUTES */]: 'End tag cannot have attributes.',\r\n    [4 /* END_TAG_WITH_TRAILING_SOLIDUS */]: \"Illegal '/' in tags.\",\r\n    [5 /* EOF_BEFORE_TAG_NAME */]: 'Unexpected EOF in tag.',\r\n    [6 /* EOF_IN_CDATA */]: 'Unexpected EOF in CDATA section.',\r\n    [7 /* EOF_IN_COMMENT */]: 'Unexpected EOF in comment.',\r\n    [8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */]: 'Unexpected EOF in script.',\r\n    [9 /* EOF_IN_TAG */]: 'Unexpected EOF in tag.',\r\n    [10 /* INCORRECTLY_CLOSED_COMMENT */]: 'Incorrectly closed comment.',\r\n    [11 /* INCORRECTLY_OPENED_COMMENT */]: 'Incorrectly opened comment.',\r\n    [12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */]: \"Illegal tag name. Use '&lt;' to print '<'.\",\r\n    [13 /* MISSING_ATTRIBUTE_VALUE */]: 'Attribute value was expected.',\r\n    [14 /* MISSING_END_TAG_NAME */]: 'End tag name was expected.',\r\n    [15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */]: 'Whitespace was expected.',\r\n    [16 /* NESTED_COMMENT */]: \"Unexpected '<!--' in comment.\",\r\n    [17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */]: 'Attribute name cannot contain U+0022 (\"), U+0027 (\\'), and U+003C (<).',\r\n    [18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */]: 'Unquoted attribute value cannot contain U+0022 (\"), U+0027 (\\'), U+003C (<), U+003D (=), and U+0060 (`).',\r\n    [19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */]: \"Attribute name cannot start with '='.\",\r\n    [21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */]: \"'<?' is allowed only in XML context.\",\r\n    [22 /* UNEXPECTED_SOLIDUS_IN_TAG */]: \"Illegal '/' in tags.\",\r\n    // Vue-specific parse errors\r\n    [23 /* X_INVALID_END_TAG */]: 'Invalid end tag.',\r\n    [24 /* X_MISSING_END_TAG */]: 'Element is missing end tag.',\r\n    [25 /* X_MISSING_INTERPOLATION_END */]: 'Interpolation end sign was not found.',\r\n    [26 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */]: 'End bracket for dynamic directive argument was not found. ' +\r\n        'Note that dynamic directive argument cannot contain spaces.',\r\n    // transform errors\r\n    [27 /* X_V_IF_NO_EXPRESSION */]: `v-if/v-else-if is missing expression.`,\r\n    [28 /* X_V_IF_SAME_KEY */]: `v-if/else branches must use unique keys.`,\r\n    [29 /* X_V_ELSE_NO_ADJACENT_IF */]: `v-else/v-else-if has no adjacent v-if.`,\r\n    [30 /* X_V_FOR_NO_EXPRESSION */]: `v-for is missing expression.`,\r\n    [31 /* X_V_FOR_MALFORMED_EXPRESSION */]: `v-for has invalid expression.`,\r\n    [32 /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */]: `<template v-for> key should be placed on the <template> tag.`,\r\n    [33 /* X_V_BIND_NO_EXPRESSION */]: `v-bind is missing expression.`,\r\n    [34 /* X_V_ON_NO_EXPRESSION */]: `v-on is missing expression.`,\r\n    [35 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */]: `Unexpected custom directive on <slot> outlet.`,\r\n    [36 /* X_V_SLOT_MIXED_SLOT_USAGE */]: `Mixed v-slot usage on both the component and nested <template>.` +\r\n        `When there are multiple named slots, all slots should use <template> ` +\r\n        `syntax to avoid scope ambiguity.`,\r\n    [37 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */]: `Duplicate slot names found. `,\r\n    [38 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */]: `Extraneous children found when component already has explicitly named ` +\r\n        `default slot. These children will be ignored.`,\r\n    [39 /* X_V_SLOT_MISPLACED */]: `v-slot can only be used on components or <template> tags.`,\r\n    [40 /* X_V_MODEL_NO_EXPRESSION */]: `v-model is missing expression.`,\r\n    [41 /* X_V_MODEL_MALFORMED_EXPRESSION */]: `v-model value must be a valid JavaScript member expression.`,\r\n    [42 /* X_V_MODEL_ON_SCOPE_VARIABLE */]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,\r\n    [43 /* X_INVALID_EXPRESSION */]: `Error parsing JavaScript expression: `,\r\n    [44 /* X_KEEP_ALIVE_INVALID_CHILDREN */]: `<KeepAlive> expects exactly one child component.`,\r\n    // generic errors\r\n    [45 /* X_PREFIX_ID_NOT_SUPPORTED */]: `\"prefixIdentifiers\" option is not supported in this build of compiler.`,\r\n    [46 /* X_MODULE_MODE_NOT_SUPPORTED */]: `ES module mode is not supported in this build of compiler.`,\r\n    [47 /* X_CACHE_HANDLER_NOT_SUPPORTED */]: `\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.`,\r\n    [48 /* X_SCOPE_ID_NOT_SUPPORTED */]: `\"scopeId\" option is only supported in module mode.`\r\n};\n\nconst FRAGMENT = Symbol((process.env.NODE_ENV !== 'production') ? `Fragment` : ``);\r\nconst TELEPORT = Symbol((process.env.NODE_ENV !== 'production') ? `Teleport` : ``);\r\nconst SUSPENSE = Symbol((process.env.NODE_ENV !== 'production') ? `Suspense` : ``);\r\nconst KEEP_ALIVE = Symbol((process.env.NODE_ENV !== 'production') ? `KeepAlive` : ``);\r\nconst BASE_TRANSITION = Symbol((process.env.NODE_ENV !== 'production') ? `BaseTransition` : ``);\r\nconst OPEN_BLOCK = Symbol((process.env.NODE_ENV !== 'production') ? `openBlock` : ``);\r\nconst CREATE_BLOCK = Symbol((process.env.NODE_ENV !== 'production') ? `createBlock` : ``);\r\nconst CREATE_VNODE = Symbol((process.env.NODE_ENV !== 'production') ? `createVNode` : ``);\r\nconst CREATE_COMMENT = Symbol((process.env.NODE_ENV !== 'production') ? `createCommentVNode` : ``);\r\nconst CREATE_TEXT = Symbol((process.env.NODE_ENV !== 'production') ? `createTextVNode` : ``);\r\nconst CREATE_STATIC = Symbol((process.env.NODE_ENV !== 'production') ? `createStaticVNode` : ``);\r\nconst RESOLVE_COMPONENT = Symbol((process.env.NODE_ENV !== 'production') ? `resolveComponent` : ``);\r\nconst RESOLVE_DYNAMIC_COMPONENT = Symbol((process.env.NODE_ENV !== 'production') ? `resolveDynamicComponent` : ``);\r\nconst RESOLVE_DIRECTIVE = Symbol((process.env.NODE_ENV !== 'production') ? `resolveDirective` : ``);\r\nconst WITH_DIRECTIVES = Symbol((process.env.NODE_ENV !== 'production') ? `withDirectives` : ``);\r\nconst RENDER_LIST = Symbol((process.env.NODE_ENV !== 'production') ? `renderList` : ``);\r\nconst RENDER_SLOT = Symbol((process.env.NODE_ENV !== 'production') ? `renderSlot` : ``);\r\nconst CREATE_SLOTS = Symbol((process.env.NODE_ENV !== 'production') ? `createSlots` : ``);\r\nconst TO_DISPLAY_STRING = Symbol((process.env.NODE_ENV !== 'production') ? `toDisplayString` : ``);\r\nconst MERGE_PROPS = Symbol((process.env.NODE_ENV !== 'production') ? `mergeProps` : ``);\r\nconst TO_HANDLERS = Symbol((process.env.NODE_ENV !== 'production') ? `toHandlers` : ``);\r\nconst CAMELIZE = Symbol((process.env.NODE_ENV !== 'production') ? `camelize` : ``);\r\nconst CAPITALIZE = Symbol((process.env.NODE_ENV !== 'production') ? `capitalize` : ``);\r\nconst TO_HANDLER_KEY = Symbol((process.env.NODE_ENV !== 'production') ? `toHandlerKey` : ``);\r\nconst SET_BLOCK_TRACKING = Symbol((process.env.NODE_ENV !== 'production') ? `setBlockTracking` : ``);\r\nconst PUSH_SCOPE_ID = Symbol((process.env.NODE_ENV !== 'production') ? `pushScopeId` : ``);\r\nconst POP_SCOPE_ID = Symbol((process.env.NODE_ENV !== 'production') ? `popScopeId` : ``);\r\nconst WITH_SCOPE_ID = Symbol((process.env.NODE_ENV !== 'production') ? `withScopeId` : ``);\r\nconst WITH_CTX = Symbol((process.env.NODE_ENV !== 'production') ? `withCtx` : ``);\r\nconst UNREF = Symbol((process.env.NODE_ENV !== 'production') ? `unref` : ``);\r\nconst IS_REF = Symbol((process.env.NODE_ENV !== 'production') ? `isRef` : ``);\r\n// Name mapping for runtime helpers that need to be imported from 'vue' in\r\n// generated code. Make sure these are correctly exported in the runtime!\r\n// Using `any` here because TS doesn't allow symbols as index type.\r\nconst helperNameMap = {\r\n    [FRAGMENT]: `Fragment`,\r\n    [TELEPORT]: `Teleport`,\r\n    [SUSPENSE]: `Suspense`,\r\n    [KEEP_ALIVE]: `KeepAlive`,\r\n    [BASE_TRANSITION]: `BaseTransition`,\r\n    [OPEN_BLOCK]: `openBlock`,\r\n    [CREATE_BLOCK]: `createBlock`,\r\n    [CREATE_VNODE]: `createVNode`,\r\n    [CREATE_COMMENT]: `createCommentVNode`,\r\n    [CREATE_TEXT]: `createTextVNode`,\r\n    [CREATE_STATIC]: `createStaticVNode`,\r\n    [RESOLVE_COMPONENT]: `resolveComponent`,\r\n    [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,\r\n    [RESOLVE_DIRECTIVE]: `resolveDirective`,\r\n    [WITH_DIRECTIVES]: `withDirectives`,\r\n    [RENDER_LIST]: `renderList`,\r\n    [RENDER_SLOT]: `renderSlot`,\r\n    [CREATE_SLOTS]: `createSlots`,\r\n    [TO_DISPLAY_STRING]: `toDisplayString`,\r\n    [MERGE_PROPS]: `mergeProps`,\r\n    [TO_HANDLERS]: `toHandlers`,\r\n    [CAMELIZE]: `camelize`,\r\n    [CAPITALIZE]: `capitalize`,\r\n    [TO_HANDLER_KEY]: `toHandlerKey`,\r\n    [SET_BLOCK_TRACKING]: `setBlockTracking`,\r\n    [PUSH_SCOPE_ID]: `pushScopeId`,\r\n    [POP_SCOPE_ID]: `popScopeId`,\r\n    [WITH_SCOPE_ID]: `withScopeId`,\r\n    [WITH_CTX]: `withCtx`,\r\n    [UNREF]: `unref`,\r\n    [IS_REF]: `isRef`\r\n};\r\nfunction registerRuntimeHelpers(helpers) {\r\n    Object.getOwnPropertySymbols(helpers).forEach(s => {\r\n        helperNameMap[s] = helpers[s];\r\n    });\r\n}\n\n// AST Utilities ---------------------------------------------------------------\r\n// Some expressions, e.g. sequence and conditional expressions, are never\r\n// associated with template nodes, so their source locations are just a stub.\r\n// Container types like CompoundExpression also don't need a real location.\r\nconst locStub = {\r\n    source: '',\r\n    start: { line: 1, column: 1, offset: 0 },\r\n    end: { line: 1, column: 1, offset: 0 }\r\n};\r\nfunction createRoot(children, loc = locStub) {\r\n    return {\r\n        type: 0 /* ROOT */,\r\n        children,\r\n        helpers: [],\r\n        components: [],\r\n        directives: [],\r\n        hoists: [],\r\n        imports: [],\r\n        cached: 0,\r\n        temps: 0,\r\n        codegenNode: undefined,\r\n        loc\r\n    };\r\n}\r\nfunction createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, loc = locStub) {\r\n    if (context) {\r\n        if (isBlock) {\r\n            context.helper(OPEN_BLOCK);\r\n            context.helper(CREATE_BLOCK);\r\n        }\r\n        else {\r\n            context.helper(CREATE_VNODE);\r\n        }\r\n        if (directives) {\r\n            context.helper(WITH_DIRECTIVES);\r\n        }\r\n    }\r\n    return {\r\n        type: 13 /* VNODE_CALL */,\r\n        tag,\r\n        props,\r\n        children,\r\n        patchFlag,\r\n        dynamicProps,\r\n        directives,\r\n        isBlock,\r\n        disableTracking,\r\n        loc\r\n    };\r\n}\r\nfunction createArrayExpression(elements, loc = locStub) {\r\n    return {\r\n        type: 17 /* JS_ARRAY_EXPRESSION */,\r\n        loc,\r\n        elements\r\n    };\r\n}\r\nfunction createObjectExpression(properties, loc = locStub) {\r\n    return {\r\n        type: 15 /* JS_OBJECT_EXPRESSION */,\r\n        loc,\r\n        properties\r\n    };\r\n}\r\nfunction createObjectProperty(key, value) {\r\n    return {\r\n        type: 16 /* JS_PROPERTY */,\r\n        loc: locStub,\r\n        key: isString(key) ? createSimpleExpression(key, true) : key,\r\n        value\r\n    };\r\n}\r\nfunction createSimpleExpression(content, isStatic, loc = locStub, constType = 0 /* NOT_CONSTANT */) {\r\n    return {\r\n        type: 4 /* SIMPLE_EXPRESSION */,\r\n        loc,\r\n        content,\r\n        isStatic,\r\n        constType: isStatic ? 3 /* CAN_STRINGIFY */ : constType\r\n    };\r\n}\r\nfunction createInterpolation(content, loc) {\r\n    return {\r\n        type: 5 /* INTERPOLATION */,\r\n        loc,\r\n        content: isString(content)\r\n            ? createSimpleExpression(content, false, loc)\r\n            : content\r\n    };\r\n}\r\nfunction createCompoundExpression(children, loc = locStub) {\r\n    return {\r\n        type: 8 /* COMPOUND_EXPRESSION */,\r\n        loc,\r\n        children\r\n    };\r\n}\r\nfunction createCallExpression(callee, args = [], loc = locStub) {\r\n    return {\r\n        type: 14 /* JS_CALL_EXPRESSION */,\r\n        loc,\r\n        callee,\r\n        arguments: args\r\n    };\r\n}\r\nfunction createFunctionExpression(params, returns = undefined, newline = false, isSlot = false, loc = locStub) {\r\n    return {\r\n        type: 18 /* JS_FUNCTION_EXPRESSION */,\r\n        params,\r\n        returns,\r\n        newline,\r\n        isSlot,\r\n        loc\r\n    };\r\n}\r\nfunction createConditionalExpression(test, consequent, alternate, newline = true) {\r\n    return {\r\n        type: 19 /* JS_CONDITIONAL_EXPRESSION */,\r\n        test,\r\n        consequent,\r\n        alternate,\r\n        newline,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createCacheExpression(index, value, isVNode = false) {\r\n    return {\r\n        type: 20 /* JS_CACHE_EXPRESSION */,\r\n        index,\r\n        value,\r\n        isVNode,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createBlockStatement(body) {\r\n    return {\r\n        type: 21 /* JS_BLOCK_STATEMENT */,\r\n        body,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createTemplateLiteral(elements) {\r\n    return {\r\n        type: 22 /* JS_TEMPLATE_LITERAL */,\r\n        elements,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createIfStatement(test, consequent, alternate) {\r\n    return {\r\n        type: 23 /* JS_IF_STATEMENT */,\r\n        test,\r\n        consequent,\r\n        alternate,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createAssignmentExpression(left, right) {\r\n    return {\r\n        type: 24 /* JS_ASSIGNMENT_EXPRESSION */,\r\n        left,\r\n        right,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createSequenceExpression(expressions) {\r\n    return {\r\n        type: 25 /* JS_SEQUENCE_EXPRESSION */,\r\n        expressions,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createReturnStatement(returns) {\r\n    return {\r\n        type: 26 /* JS_RETURN_STATEMENT */,\r\n        returns,\r\n        loc: locStub\r\n    };\r\n}\n\nconst isStaticExp = (p) => p.type === 4 /* SIMPLE_EXPRESSION */ && p.isStatic;\r\nconst isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);\r\nfunction isCoreComponent(tag) {\r\n    if (isBuiltInType(tag, 'Teleport')) {\r\n        return TELEPORT;\r\n    }\r\n    else if (isBuiltInType(tag, 'Suspense')) {\r\n        return SUSPENSE;\r\n    }\r\n    else if (isBuiltInType(tag, 'KeepAlive')) {\r\n        return KEEP_ALIVE;\r\n    }\r\n    else if (isBuiltInType(tag, 'BaseTransition')) {\r\n        return BASE_TRANSITION;\r\n    }\r\n}\r\nconst nonIdentifierRE = /^\\d|[^\\$\\w]/;\r\nconst isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);\r\nconst memberExpRE = /^[A-Za-z_$][\\w$]*(?:\\s*\\.\\s*[A-Za-z_$][\\w$]*|\\[[^\\]]+\\])*$/;\r\nconst isMemberExpression = (path) => {\r\n    if (!path)\r\n        return false;\r\n    return memberExpRE.test(path.trim());\r\n};\r\nfunction getInnerRange(loc, offset, length) {\r\n    const source = loc.source.substr(offset, length);\r\n    const newLoc = {\r\n        source,\r\n        start: advancePositionWithClone(loc.start, loc.source, offset),\r\n        end: loc.end\r\n    };\r\n    if (length != null) {\r\n        newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);\r\n    }\r\n    return newLoc;\r\n}\r\nfunction advancePositionWithClone(pos, source, numberOfCharacters = source.length) {\r\n    return advancePositionWithMutation(extend({}, pos), source, numberOfCharacters);\r\n}\r\n// advance by mutation without cloning (for performance reasons), since this\r\n// gets called a lot in the parser\r\nfunction advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {\r\n    let linesCount = 0;\r\n    let lastNewLinePos = -1;\r\n    for (let i = 0; i < numberOfCharacters; i++) {\r\n        if (source.charCodeAt(i) === 10 /* newline char code */) {\r\n            linesCount++;\r\n            lastNewLinePos = i;\r\n        }\r\n    }\r\n    pos.offset += numberOfCharacters;\r\n    pos.line += linesCount;\r\n    pos.column =\r\n        lastNewLinePos === -1\r\n            ? pos.column + numberOfCharacters\r\n            : numberOfCharacters - lastNewLinePos;\r\n    return pos;\r\n}\r\nfunction assert(condition, msg) {\r\n    /* istanbul ignore if */\r\n    if (!condition) {\r\n        throw new Error(msg || `unexpected compiler condition`);\r\n    }\r\n}\r\nfunction findDir(node, name, allowEmpty = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 7 /* DIRECTIVE */ &&\r\n            (allowEmpty || p.exp) &&\r\n            (isString(name) ? p.name === name : name.test(p.name))) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction findProp(node, name, dynamicOnly = false, allowEmpty = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (dynamicOnly)\r\n                continue;\r\n            if (p.name === name && (p.value || allowEmpty)) {\r\n                return p;\r\n            }\r\n        }\r\n        else if (p.name === 'bind' &&\r\n            (p.exp || allowEmpty) &&\r\n            isBindKey(p.arg, name)) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction isBindKey(arg, name) {\r\n    return !!(arg && isStaticExp(arg) && arg.content === name);\r\n}\r\nfunction hasDynamicKeyVBind(node) {\r\n    return node.props.some(p => p.type === 7 /* DIRECTIVE */ &&\r\n        p.name === 'bind' &&\r\n        (!p.arg || // v-bind=\"obj\"\r\n            p.arg.type !== 4 /* SIMPLE_EXPRESSION */ || // v-bind:[_ctx.foo]\r\n            !p.arg.isStatic) // v-bind:[foo]\r\n    );\r\n}\r\nfunction isText(node) {\r\n    return node.type === 5 /* INTERPOLATION */ || node.type === 2 /* TEXT */;\r\n}\r\nfunction isVSlot(p) {\r\n    return p.type === 7 /* DIRECTIVE */ && p.name === 'slot';\r\n}\r\nfunction isTemplateNode(node) {\r\n    return (node.type === 1 /* ELEMENT */ && node.tagType === 3 /* TEMPLATE */);\r\n}\r\nfunction isSlotOutlet(node) {\r\n    return node.type === 1 /* ELEMENT */ && node.tagType === 2 /* SLOT */;\r\n}\r\nfunction injectProp(node, prop, context) {\r\n    let propsWithInjection;\r\n    const props = node.type === 13 /* VNODE_CALL */ ? node.props : node.arguments[2];\r\n    if (props == null || isString(props)) {\r\n        propsWithInjection = createObjectExpression([prop]);\r\n    }\r\n    else if (props.type === 14 /* JS_CALL_EXPRESSION */) {\r\n        // merged props... add ours\r\n        // only inject key to object literal if it's the first argument so that\r\n        // if doesn't override user provided keys\r\n        const first = props.arguments[0];\r\n        if (!isString(first) && first.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n            first.properties.unshift(prop);\r\n        }\r\n        else {\r\n            if (props.callee === TO_HANDLERS) {\r\n                // #2366\r\n                propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n                    createObjectExpression([prop]),\r\n                    props\r\n                ]);\r\n            }\r\n            else {\r\n                props.arguments.unshift(createObjectExpression([prop]));\r\n            }\r\n        }\r\n        !propsWithInjection && (propsWithInjection = props);\r\n    }\r\n    else if (props.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n        let alreadyExists = false;\r\n        // check existing key to avoid overriding user provided keys\r\n        if (prop.key.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            const propKeyName = prop.key.content;\r\n            alreadyExists = props.properties.some(p => p.key.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                p.key.content === propKeyName);\r\n        }\r\n        if (!alreadyExists) {\r\n            props.properties.unshift(prop);\r\n        }\r\n        propsWithInjection = props;\r\n    }\r\n    else {\r\n        // single v-bind with expression, return a merged replacement\r\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n            createObjectExpression([prop]),\r\n            props\r\n        ]);\r\n    }\r\n    if (node.type === 13 /* VNODE_CALL */) {\r\n        node.props = propsWithInjection;\r\n    }\r\n    else {\r\n        node.arguments[2] = propsWithInjection;\r\n    }\r\n}\r\nfunction toValidAssetId(name, type) {\r\n    return `_${type}_${name.replace(/[^\\w]/g, '_')}`;\r\n}\r\n// Check if a node contains expressions that reference current context scope ids\r\nfunction hasScopeRef(node, ids) {\r\n    if (!node || Object.keys(ids).length === 0) {\r\n        return false;\r\n    }\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            for (let i = 0; i < node.props.length; i++) {\r\n                const p = node.props[i];\r\n                if (p.type === 7 /* DIRECTIVE */ &&\r\n                    (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {\r\n                    return true;\r\n                }\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 11 /* FOR */:\r\n            if (hasScopeRef(node.source, ids)) {\r\n                return true;\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 9 /* IF */:\r\n            return node.branches.some(b => hasScopeRef(b, ids));\r\n        case 10 /* IF_BRANCH */:\r\n            if (hasScopeRef(node.condition, ids)) {\r\n                return true;\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            return (!node.isStatic &&\r\n                isSimpleIdentifier(node.content) &&\r\n                !!ids[node.content]);\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            return node.children.some(c => isObject(c) && hasScopeRef(c, ids));\r\n        case 5 /* INTERPOLATION */:\r\n        case 12 /* TEXT_CALL */:\r\n            return hasScopeRef(node.content, ids);\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return false;\r\n        default:\r\n            if ((process.env.NODE_ENV !== 'production')) ;\r\n            return false;\r\n    }\r\n}\n\n// The default decoder only provides escapes for characters reserved as part of\r\n// the template syntax, and is only used if the custom renderer did not provide\r\n// a platform-specific decoder.\r\nconst decodeRE = /&(gt|lt|amp|apos|quot);/g;\r\nconst decodeMap = {\r\n    gt: '>',\r\n    lt: '<',\r\n    amp: '&',\r\n    apos: \"'\",\r\n    quot: '\"'\r\n};\r\nconst defaultParserOptions = {\r\n    delimiters: [`{{`, `}}`],\r\n    getNamespace: () => 0 /* HTML */,\r\n    getTextMode: () => 0 /* DATA */,\r\n    isVoidTag: NO,\r\n    isPreTag: NO,\r\n    isCustomElement: NO,\r\n    decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),\r\n    onError: defaultOnError,\r\n    comments: false\r\n};\r\nfunction baseParse(content, options = {}) {\r\n    const context = createParserContext(content, options);\r\n    const start = getCursor(context);\r\n    return createRoot(parseChildren(context, 0 /* DATA */, []), getSelection(context, start));\r\n}\r\nfunction createParserContext(content, rawOptions) {\r\n    const options = extend({}, defaultParserOptions);\r\n    for (const key in rawOptions) {\r\n        // @ts-ignore\r\n        options[key] = rawOptions[key] || defaultParserOptions[key];\r\n    }\r\n    return {\r\n        options,\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        originalSource: content,\r\n        source: content,\r\n        inPre: false,\r\n        inVPre: false\r\n    };\r\n}\r\nfunction parseChildren(context, mode, ancestors) {\r\n    const parent = last(ancestors);\r\n    const ns = parent ? parent.ns : 0 /* HTML */;\r\n    const nodes = [];\r\n    while (!isEnd(context, mode, ancestors)) {\r\n        const s = context.source;\r\n        let node = undefined;\r\n        if (mode === 0 /* DATA */ || mode === 1 /* RCDATA */) {\r\n            if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {\r\n                // '{{'\r\n                node = parseInterpolation(context, mode);\r\n            }\r\n            else if (mode === 0 /* DATA */ && s[0] === '<') {\r\n                // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\r\n                if (s.length === 1) {\r\n                    emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 1);\r\n                }\r\n                else if (s[1] === '!') {\r\n                    // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state\r\n                    if (startsWith(s, '<!--')) {\r\n                        node = parseComment(context);\r\n                    }\r\n                    else if (startsWith(s, '<!DOCTYPE')) {\r\n                        // Ignore DOCTYPE by a limitation.\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                    else if (startsWith(s, '<![CDATA[')) {\r\n                        if (ns !== 0 /* HTML */) {\r\n                            node = parseCDATA(context, ancestors);\r\n                        }\r\n                        else {\r\n                            emitError(context, 1 /* CDATA_IN_HTML_CONTENT */);\r\n                            node = parseBogusComment(context);\r\n                        }\r\n                    }\r\n                    else {\r\n                        emitError(context, 11 /* INCORRECTLY_OPENED_COMMENT */);\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                }\r\n                else if (s[1] === '/') {\r\n                    // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state\r\n                    if (s.length === 2) {\r\n                        emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 2);\r\n                    }\r\n                    else if (s[2] === '>') {\r\n                        emitError(context, 14 /* MISSING_END_TAG_NAME */, 2);\r\n                        advanceBy(context, 3);\r\n                        continue;\r\n                    }\r\n                    else if (/[a-z]/i.test(s[2])) {\r\n                        emitError(context, 23 /* X_INVALID_END_TAG */);\r\n                        parseTag(context, 1 /* End */, parent);\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 2);\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                }\r\n                else if (/[a-z]/i.test(s[1])) {\r\n                    node = parseElement(context, ancestors);\r\n                }\r\n                else if (s[1] === '?') {\r\n                    emitError(context, 21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */, 1);\r\n                    node = parseBogusComment(context);\r\n                }\r\n                else {\r\n                    emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 1);\r\n                }\r\n            }\r\n        }\r\n        if (!node) {\r\n            node = parseText(context, mode);\r\n        }\r\n        if (isArray(node)) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                pushNode(nodes, node[i]);\r\n            }\r\n        }\r\n        else {\r\n            pushNode(nodes, node);\r\n        }\r\n    }\r\n    // Whitespace management for more efficient output\r\n    // (same as v2 whitespace: 'condense')\r\n    let removedWhitespace = false;\r\n    if (mode !== 2 /* RAWTEXT */) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            if (!context.inPre && node.type === 2 /* TEXT */) {\r\n                if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n                    const prev = nodes[i - 1];\r\n                    const next = nodes[i + 1];\r\n                    // If:\r\n                    // - the whitespace is the first or last node, or:\r\n                    // - the whitespace is adjacent to a comment, or:\r\n                    // - the whitespace is between two elements AND contains newline\r\n                    // Then the whitespace is ignored.\r\n                    if (!prev ||\r\n                        !next ||\r\n                        prev.type === 3 /* COMMENT */ ||\r\n                        next.type === 3 /* COMMENT */ ||\r\n                        (prev.type === 1 /* ELEMENT */ &&\r\n                            next.type === 1 /* ELEMENT */ &&\r\n                            /[\\r\\n]/.test(node.content))) {\r\n                        removedWhitespace = true;\r\n                        nodes[i] = null;\r\n                    }\r\n                    else {\r\n                        // Otherwise, condensed consecutive whitespace inside the text\r\n                        // down to a single space\r\n                        node.content = ' ';\r\n                    }\r\n                }\r\n                else {\r\n                    node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, ' ');\r\n                }\r\n            }\r\n            // also remove comment nodes in prod by default\r\n            if (!(process.env.NODE_ENV !== 'production') &&\r\n                node.type === 3 /* COMMENT */ &&\r\n                !context.options.comments) {\r\n                removedWhitespace = true;\r\n                nodes[i] = null;\r\n            }\r\n        }\r\n        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {\r\n            // remove leading newline per html spec\r\n            // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element\r\n            const first = nodes[0];\r\n            if (first && first.type === 2 /* TEXT */) {\r\n                first.content = first.content.replace(/^\\r?\\n/, '');\r\n            }\r\n        }\r\n    }\r\n    return removedWhitespace ? nodes.filter(Boolean) : nodes;\r\n}\r\nfunction pushNode(nodes, node) {\r\n    if (node.type === 2 /* TEXT */) {\r\n        const prev = last(nodes);\r\n        // Merge if both this and the previous node are text and those are\r\n        // consecutive. This happens for cases like \"a < b\".\r\n        if (prev &&\r\n            prev.type === 2 /* TEXT */ &&\r\n            prev.loc.end.offset === node.loc.start.offset) {\r\n            prev.content += node.content;\r\n            prev.loc.end = node.loc.end;\r\n            prev.loc.source += node.loc.source;\r\n            return;\r\n        }\r\n    }\r\n    nodes.push(node);\r\n}\r\nfunction parseCDATA(context, ancestors) {\r\n    advanceBy(context, 9);\r\n    const nodes = parseChildren(context, 3 /* CDATA */, ancestors);\r\n    if (context.source.length === 0) {\r\n        emitError(context, 6 /* EOF_IN_CDATA */);\r\n    }\r\n    else {\r\n        advanceBy(context, 3);\r\n    }\r\n    return nodes;\r\n}\r\nfunction parseComment(context) {\r\n    const start = getCursor(context);\r\n    let content;\r\n    // Regular comment.\r\n    const match = /--(\\!)?>/.exec(context.source);\r\n    if (!match) {\r\n        content = context.source.slice(4);\r\n        advanceBy(context, context.source.length);\r\n        emitError(context, 7 /* EOF_IN_COMMENT */);\r\n    }\r\n    else {\r\n        if (match.index <= 3) {\r\n            emitError(context, 0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */);\r\n        }\r\n        if (match[1]) {\r\n            emitError(context, 10 /* INCORRECTLY_CLOSED_COMMENT */);\r\n        }\r\n        content = context.source.slice(4, match.index);\r\n        // Advancing with reporting nested comments.\r\n        const s = context.source.slice(0, match.index);\r\n        let prevIndex = 1, nestedIndex = 0;\r\n        while ((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1) {\r\n            advanceBy(context, nestedIndex - prevIndex + 1);\r\n            if (nestedIndex + 4 < s.length) {\r\n                emitError(context, 16 /* NESTED_COMMENT */);\r\n            }\r\n            prevIndex = nestedIndex + 1;\r\n        }\r\n        advanceBy(context, match.index + match[0].length - prevIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseBogusComment(context) {\r\n    const start = getCursor(context);\r\n    const contentStart = context.source[1] === '?' ? 1 : 2;\r\n    let content;\r\n    const closeIndex = context.source.indexOf('>');\r\n    if (closeIndex === -1) {\r\n        content = context.source.slice(contentStart);\r\n        advanceBy(context, context.source.length);\r\n    }\r\n    else {\r\n        content = context.source.slice(contentStart, closeIndex);\r\n        advanceBy(context, closeIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseElement(context, ancestors) {\r\n    // Start tag.\r\n    const wasInPre = context.inPre;\r\n    const wasInVPre = context.inVPre;\r\n    const parent = last(ancestors);\r\n    const element = parseTag(context, 0 /* Start */, parent);\r\n    const isPreBoundary = context.inPre && !wasInPre;\r\n    const isVPreBoundary = context.inVPre && !wasInVPre;\r\n    if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\r\n        return element;\r\n    }\r\n    // Children.\r\n    ancestors.push(element);\r\n    const mode = context.options.getTextMode(element, parent);\r\n    const children = parseChildren(context, mode, ancestors);\r\n    ancestors.pop();\r\n    element.children = children;\r\n    // End tag.\r\n    if (startsWithEndTagOpen(context.source, element.tag)) {\r\n        parseTag(context, 1 /* End */, parent);\r\n    }\r\n    else {\r\n        emitError(context, 24 /* X_MISSING_END_TAG */, 0, element.loc.start);\r\n        if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {\r\n            const first = children[0];\r\n            if (first && startsWith(first.loc.source, '<!--')) {\r\n                emitError(context, 8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */);\r\n            }\r\n        }\r\n    }\r\n    element.loc = getSelection(context, element.loc.start);\r\n    if (isPreBoundary) {\r\n        context.inPre = false;\r\n    }\r\n    if (isVPreBoundary) {\r\n        context.inVPre = false;\r\n    }\r\n    return element;\r\n}\r\nconst isSpecialTemplateDirective = /*#__PURE__*/ makeMap(`if,else,else-if,for,slot`);\r\n/**\r\n * Parse a tag (E.g. `<div id=a>`) with that type (start tag or end tag).\r\n */\r\nfunction parseTag(context, type, parent) {\r\n    // Tag open.\r\n    const start = getCursor(context);\r\n    const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source);\r\n    const tag = match[1];\r\n    const ns = context.options.getNamespace(tag, parent);\r\n    advanceBy(context, match[0].length);\r\n    advanceSpaces(context);\r\n    // save current state in case we need to re-parse attributes with v-pre\r\n    const cursor = getCursor(context);\r\n    const currentSource = context.source;\r\n    // Attributes.\r\n    let props = parseAttributes(context, type);\r\n    // check <pre> tag\r\n    if (context.options.isPreTag(tag)) {\r\n        context.inPre = true;\r\n    }\r\n    // check v-pre\r\n    if (!context.inVPre &&\r\n        props.some(p => p.type === 7 /* DIRECTIVE */ && p.name === 'pre')) {\r\n        context.inVPre = true;\r\n        // reset context\r\n        extend(context, cursor);\r\n        context.source = currentSource;\r\n        // re-parse attrs and filter out v-pre itself\r\n        props = parseAttributes(context, type).filter(p => p.name !== 'v-pre');\r\n    }\r\n    // Tag close.\r\n    let isSelfClosing = false;\r\n    if (context.source.length === 0) {\r\n        emitError(context, 9 /* EOF_IN_TAG */);\r\n    }\r\n    else {\r\n        isSelfClosing = startsWith(context.source, '/>');\r\n        if (type === 1 /* End */ && isSelfClosing) {\r\n            emitError(context, 4 /* END_TAG_WITH_TRAILING_SOLIDUS */);\r\n        }\r\n        advanceBy(context, isSelfClosing ? 2 : 1);\r\n    }\r\n    let tagType = 0 /* ELEMENT */;\r\n    const options = context.options;\r\n    if (!context.inVPre && !options.isCustomElement(tag)) {\r\n        const hasVIs = props.some(p => p.type === 7 /* DIRECTIVE */ && p.name === 'is');\r\n        if (options.isNativeTag && !hasVIs) {\r\n            if (!options.isNativeTag(tag))\r\n                tagType = 1 /* COMPONENT */;\r\n        }\r\n        else if (hasVIs ||\r\n            isCoreComponent(tag) ||\r\n            (options.isBuiltInComponent && options.isBuiltInComponent(tag)) ||\r\n            /^[A-Z]/.test(tag) ||\r\n            tag === 'component') {\r\n            tagType = 1 /* COMPONENT */;\r\n        }\r\n        if (tag === 'slot') {\r\n            tagType = 2 /* SLOT */;\r\n        }\r\n        else if (tag === 'template' &&\r\n            props.some(p => {\r\n                return (p.type === 7 /* DIRECTIVE */ && isSpecialTemplateDirective(p.name));\r\n            })) {\r\n            tagType = 3 /* TEMPLATE */;\r\n        }\r\n    }\r\n    return {\r\n        type: 1 /* ELEMENT */,\r\n        ns,\r\n        tag,\r\n        tagType,\r\n        props,\r\n        isSelfClosing,\r\n        children: [],\r\n        loc: getSelection(context, start),\r\n        codegenNode: undefined // to be created during transform phase\r\n    };\r\n}\r\nfunction parseAttributes(context, type) {\r\n    const props = [];\r\n    const attributeNames = new Set();\r\n    while (context.source.length > 0 &&\r\n        !startsWith(context.source, '>') &&\r\n        !startsWith(context.source, '/>')) {\r\n        if (startsWith(context.source, '/')) {\r\n            emitError(context, 22 /* UNEXPECTED_SOLIDUS_IN_TAG */);\r\n            advanceBy(context, 1);\r\n            advanceSpaces(context);\r\n            continue;\r\n        }\r\n        if (type === 1 /* End */) {\r\n            emitError(context, 3 /* END_TAG_WITH_ATTRIBUTES */);\r\n        }\r\n        const attr = parseAttribute(context, attributeNames);\r\n        if (type === 0 /* Start */) {\r\n            props.push(attr);\r\n        }\r\n        if (/^[^\\t\\r\\n\\f />]/.test(context.source)) {\r\n            emitError(context, 15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */);\r\n        }\r\n        advanceSpaces(context);\r\n    }\r\n    return props;\r\n}\r\nfunction parseAttribute(context, nameSet) {\r\n    // Name.\r\n    const start = getCursor(context);\r\n    const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n    const name = match[0];\r\n    if (nameSet.has(name)) {\r\n        emitError(context, 2 /* DUPLICATE_ATTRIBUTE */);\r\n    }\r\n    nameSet.add(name);\r\n    if (name[0] === '=') {\r\n        emitError(context, 19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */);\r\n    }\r\n    {\r\n        const pattern = /[\"'<]/g;\r\n        let m;\r\n        while ((m = pattern.exec(name))) {\r\n            emitError(context, 17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */, m.index);\r\n        }\r\n    }\r\n    advanceBy(context, name.length);\r\n    // Value\r\n    let value = undefined;\r\n    if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\r\n        advanceSpaces(context);\r\n        advanceBy(context, 1);\r\n        advanceSpaces(context);\r\n        value = parseAttributeValue(context);\r\n        if (!value) {\r\n            emitError(context, 13 /* MISSING_ATTRIBUTE_VALUE */);\r\n        }\r\n    }\r\n    const loc = getSelection(context, start);\r\n    if (!context.inVPre && /^(v-|:|@|#)/.test(name)) {\r\n        const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)(\\[[^\\]]+\\]|[^\\.]+))?(.+)?$/i.exec(name);\r\n        const dirName = match[1] ||\r\n            (startsWith(name, ':') ? 'bind' : startsWith(name, '@') ? 'on' : 'slot');\r\n        let arg;\r\n        if (match[2]) {\r\n            const isSlot = dirName === 'slot';\r\n            const startOffset = name.indexOf(match[2]);\r\n            const loc = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match[2].length + ((isSlot && match[3]) || '').length));\r\n            let content = match[2];\r\n            let isStatic = true;\r\n            if (content.startsWith('[')) {\r\n                isStatic = false;\r\n                if (!content.endsWith(']')) {\r\n                    emitError(context, 26 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */);\r\n                }\r\n                content = content.substr(1, content.length - 2);\r\n            }\r\n            else if (isSlot) {\r\n                // #1241 special case for v-slot: vuetify relies extensively on slot\r\n                // names containing dots. v-slot doesn't have any modifiers and Vue 2.x\r\n                // supports such usage so we are keeping it consistent with 2.x.\r\n                content += match[3] || '';\r\n            }\r\n            arg = {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content,\r\n                isStatic,\r\n                constType: isStatic\r\n                    ? 3 /* CAN_STRINGIFY */\r\n                    : 0 /* NOT_CONSTANT */,\r\n                loc\r\n            };\r\n        }\r\n        if (value && value.isQuoted) {\r\n            const valueLoc = value.loc;\r\n            valueLoc.start.offset++;\r\n            valueLoc.start.column++;\r\n            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);\r\n            valueLoc.source = valueLoc.source.slice(1, -1);\r\n        }\r\n        return {\r\n            type: 7 /* DIRECTIVE */,\r\n            name: dirName,\r\n            exp: value && {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content: value.content,\r\n                isStatic: false,\r\n                // Treat as non-constant by default. This can be potentially set to\r\n                // other values by `transformExpression` to make it eligible for hoisting.\r\n                constType: 0 /* NOT_CONSTANT */,\r\n                loc: value.loc\r\n            },\r\n            arg,\r\n            modifiers: match[3] ? match[3].substr(1).split('.') : [],\r\n            loc\r\n        };\r\n    }\r\n    return {\r\n        type: 6 /* ATTRIBUTE */,\r\n        name,\r\n        value: value && {\r\n            type: 2 /* TEXT */,\r\n            content: value.content,\r\n            loc: value.loc\r\n        },\r\n        loc\r\n    };\r\n}\r\nfunction parseAttributeValue(context) {\r\n    const start = getCursor(context);\r\n    let content;\r\n    const quote = context.source[0];\r\n    const isQuoted = quote === `\"` || quote === `'`;\r\n    if (isQuoted) {\r\n        // Quoted value.\r\n        advanceBy(context, 1);\r\n        const endIndex = context.source.indexOf(quote);\r\n        if (endIndex === -1) {\r\n            content = parseTextData(context, context.source.length, 4 /* ATTRIBUTE_VALUE */);\r\n        }\r\n        else {\r\n            content = parseTextData(context, endIndex, 4 /* ATTRIBUTE_VALUE */);\r\n            advanceBy(context, 1);\r\n        }\r\n    }\r\n    else {\r\n        // Unquoted\r\n        const match = /^[^\\t\\r\\n\\f >]+/.exec(context.source);\r\n        if (!match) {\r\n            return undefined;\r\n        }\r\n        const unexpectedChars = /[\"'<=`]/g;\r\n        let m;\r\n        while ((m = unexpectedChars.exec(match[0]))) {\r\n            emitError(context, 18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */, m.index);\r\n        }\r\n        content = parseTextData(context, match[0].length, 4 /* ATTRIBUTE_VALUE */);\r\n    }\r\n    return { content, isQuoted, loc: getSelection(context, start) };\r\n}\r\nfunction parseInterpolation(context, mode) {\r\n    const [open, close] = context.options.delimiters;\r\n    const closeIndex = context.source.indexOf(close, open.length);\r\n    if (closeIndex === -1) {\r\n        emitError(context, 25 /* X_MISSING_INTERPOLATION_END */);\r\n        return undefined;\r\n    }\r\n    const start = getCursor(context);\r\n    advanceBy(context, open.length);\r\n    const innerStart = getCursor(context);\r\n    const innerEnd = getCursor(context);\r\n    const rawContentLength = closeIndex - open.length;\r\n    const rawContent = context.source.slice(0, rawContentLength);\r\n    const preTrimContent = parseTextData(context, rawContentLength, mode);\r\n    const content = preTrimContent.trim();\r\n    const startOffset = preTrimContent.indexOf(content);\r\n    if (startOffset > 0) {\r\n        advancePositionWithMutation(innerStart, rawContent, startOffset);\r\n    }\r\n    const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);\r\n    advancePositionWithMutation(innerEnd, rawContent, endOffset);\r\n    advanceBy(context, close.length);\r\n    return {\r\n        type: 5 /* INTERPOLATION */,\r\n        content: {\r\n            type: 4 /* SIMPLE_EXPRESSION */,\r\n            isStatic: false,\r\n            // Set `isConstant` to false by default and will decide in transformExpression\r\n            constType: 0 /* NOT_CONSTANT */,\r\n            content,\r\n            loc: getSelection(context, innerStart, innerEnd)\r\n        },\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseText(context, mode) {\r\n    const endTokens = ['<', context.options.delimiters[0]];\r\n    if (mode === 3 /* CDATA */) {\r\n        endTokens.push(']]>');\r\n    }\r\n    let endIndex = context.source.length;\r\n    for (let i = 0; i < endTokens.length; i++) {\r\n        const index = context.source.indexOf(endTokens[i], 1);\r\n        if (index !== -1 && endIndex > index) {\r\n            endIndex = index;\r\n        }\r\n    }\r\n    const start = getCursor(context);\r\n    const content = parseTextData(context, endIndex, mode);\r\n    return {\r\n        type: 2 /* TEXT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\n/**\r\n * Get text data with a given length from the current location.\r\n * This translates HTML entities in the text data.\r\n */\r\nfunction parseTextData(context, length, mode) {\r\n    const rawText = context.source.slice(0, length);\r\n    advanceBy(context, length);\r\n    if (mode === 2 /* RAWTEXT */ ||\r\n        mode === 3 /* CDATA */ ||\r\n        rawText.indexOf('&') === -1) {\r\n        return rawText;\r\n    }\r\n    else {\r\n        // DATA or RCDATA containing \"&\"\". Entity decoding required.\r\n        return context.options.decodeEntities(rawText, mode === 4 /* ATTRIBUTE_VALUE */);\r\n    }\r\n}\r\nfunction getCursor(context) {\r\n    const { column, line, offset } = context;\r\n    return { column, line, offset };\r\n}\r\nfunction getSelection(context, start, end) {\r\n    end = end || getCursor(context);\r\n    return {\r\n        start,\r\n        end,\r\n        source: context.originalSource.slice(start.offset, end.offset)\r\n    };\r\n}\r\nfunction last(xs) {\r\n    return xs[xs.length - 1];\r\n}\r\nfunction startsWith(source, searchString) {\r\n    return source.startsWith(searchString);\r\n}\r\nfunction advanceBy(context, numberOfCharacters) {\r\n    const { source } = context;\r\n    advancePositionWithMutation(context, source, numberOfCharacters);\r\n    context.source = source.slice(numberOfCharacters);\r\n}\r\nfunction advanceSpaces(context) {\r\n    const match = /^[\\t\\r\\n\\f ]+/.exec(context.source);\r\n    if (match) {\r\n        advanceBy(context, match[0].length);\r\n    }\r\n}\r\nfunction getNewPosition(context, start, numberOfCharacters) {\r\n    return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);\r\n}\r\nfunction emitError(context, code, offset, loc = getCursor(context)) {\r\n    if (offset) {\r\n        loc.offset += offset;\r\n        loc.column += offset;\r\n    }\r\n    context.options.onError(createCompilerError(code, {\r\n        start: loc,\r\n        end: loc,\r\n        source: ''\r\n    }));\r\n}\r\nfunction isEnd(context, mode, ancestors) {\r\n    const s = context.source;\r\n    switch (mode) {\r\n        case 0 /* DATA */:\r\n            if (startsWith(s, '</')) {\r\n                // TODO: probably bad performance\r\n                for (let i = ancestors.length - 1; i >= 0; --i) {\r\n                    if (startsWithEndTagOpen(s, ancestors[i].tag)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        case 1 /* RCDATA */:\r\n        case 2 /* RAWTEXT */: {\r\n            const parent = last(ancestors);\r\n            if (parent && startsWithEndTagOpen(s, parent.tag)) {\r\n                return true;\r\n            }\r\n            break;\r\n        }\r\n        case 3 /* CDATA */:\r\n            if (startsWith(s, ']]>')) {\r\n                return true;\r\n            }\r\n            break;\r\n    }\r\n    return !s;\r\n}\r\nfunction startsWithEndTagOpen(source, tag) {\r\n    return (startsWith(source, '</') &&\r\n        source.substr(2, tag.length).toLowerCase() === tag.toLowerCase() &&\r\n        /[\\t\\r\\n\\f />]/.test(source[2 + tag.length] || '>'));\r\n}\n\nfunction hoistStatic(root, context) {\r\n    walk(root, context, \r\n    // Root node is unfortunately non-hoistable due to potential parent\r\n    // fallthrough attributes.\r\n    isSingleElementRoot(root, root.children[0]));\r\n}\r\nfunction isSingleElementRoot(root, child) {\r\n    const { children } = root;\r\n    return (children.length === 1 &&\r\n        child.type === 1 /* ELEMENT */ &&\r\n        !isSlotOutlet(child));\r\n}\r\nfunction walk(node, context, doNotHoistNode = false) {\r\n    let hasHoistedNode = false;\r\n    // Some transforms, e.g. transformAssetUrls from @vue/compiler-sfc, replaces\r\n    // static bindings with expressions. These expressions are guaranteed to be\r\n    // constant so they are still eligible for hoisting, but they are only\r\n    // available at runtime and therefore cannot be evaluated ahead of time.\r\n    // This is only a concern for pre-stringification (via transformHoist by\r\n    // @vue/compiler-dom), but doing it here allows us to perform only one full\r\n    // walk of the AST and allow `stringifyStatic` to stop walking as soon as its\r\n    // stringficiation threshold is met.\r\n    let canStringify = true;\r\n    const { children } = node;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // only plain elements & text calls are eligible for hoisting.\r\n        if (child.type === 1 /* ELEMENT */ &&\r\n            child.tagType === 0 /* ELEMENT */) {\r\n            const constantType = doNotHoistNode\r\n                ? 0 /* NOT_CONSTANT */\r\n                : getConstantType(child, context);\r\n            if (constantType > 0 /* NOT_CONSTANT */) {\r\n                if (constantType < 3 /* CAN_STRINGIFY */) {\r\n                    canStringify = false;\r\n                }\r\n                if (constantType >= 2 /* CAN_HOIST */) {\r\n                    child.codegenNode.patchFlag =\r\n                        -1 /* HOISTED */ + ((process.env.NODE_ENV !== 'production') ? ` /* HOISTED */` : ``);\r\n                    child.codegenNode = context.hoist(child.codegenNode);\r\n                    hasHoistedNode = true;\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                // node may contain dynamic children, but its props may be eligible for\r\n                // hoisting.\r\n                const codegenNode = child.codegenNode;\r\n                if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n                    const flag = getPatchFlag(codegenNode);\r\n                    if ((!flag ||\r\n                        flag === 512 /* NEED_PATCH */ ||\r\n                        flag === 1 /* TEXT */) &&\r\n                        getGeneratedPropsConstantType(child, context) >=\r\n                            2 /* CAN_HOIST */) {\r\n                        const props = getNodeProps(child);\r\n                        if (props) {\r\n                            codegenNode.props = context.hoist(props);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (child.type === 12 /* TEXT_CALL */) {\r\n            const contentType = getConstantType(child.content, context);\r\n            if (contentType > 0) {\r\n                if (contentType < 3 /* CAN_STRINGIFY */) {\r\n                    canStringify = false;\r\n                }\r\n                if (contentType >= 2 /* CAN_HOIST */) {\r\n                    child.codegenNode = context.hoist(child.codegenNode);\r\n                    hasHoistedNode = true;\r\n                }\r\n            }\r\n        }\r\n        // walk further\r\n        if (child.type === 1 /* ELEMENT */) {\r\n            walk(child, context);\r\n        }\r\n        else if (child.type === 11 /* FOR */) {\r\n            // Do not hoist v-for single child because it has to be a block\r\n            walk(child, context, child.children.length === 1);\r\n        }\r\n        else if (child.type === 9 /* IF */) {\r\n            for (let i = 0; i < child.branches.length; i++) {\r\n                // Do not hoist v-if single child because it has to be a block\r\n                walk(child.branches[i], context, child.branches[i].children.length === 1);\r\n            }\r\n        }\r\n    }\r\n    if (canStringify && hasHoistedNode && context.transformHoist) {\r\n        context.transformHoist(children, context, node);\r\n    }\r\n}\r\nfunction getConstantType(node, context) {\r\n    const { constantCache } = context;\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            if (node.tagType !== 0 /* ELEMENT */) {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            const cached = constantCache.get(node);\r\n            if (cached !== undefined) {\r\n                return cached;\r\n            }\r\n            const codegenNode = node.codegenNode;\r\n            if (codegenNode.type !== 13 /* VNODE_CALL */) {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            const flag = getPatchFlag(codegenNode);\r\n            if (!flag) {\r\n                let returnType = 3 /* CAN_STRINGIFY */;\r\n                // Element itself has no patch flag. However we still need to check:\r\n                // 1. Even for a node with no patch flag, it is possible for it to contain\r\n                // non-hoistable expressions that refers to scope variables, e.g. compiler\r\n                // injected keys or cached event handlers. Therefore we need to always\r\n                // check the codegenNode's props to be sure.\r\n                const generatedPropsType = getGeneratedPropsConstantType(node, context);\r\n                if (generatedPropsType === 0 /* NOT_CONSTANT */) {\r\n                    constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                    return 0 /* NOT_CONSTANT */;\r\n                }\r\n                if (generatedPropsType < returnType) {\r\n                    returnType = generatedPropsType;\r\n                }\r\n                // 2. its children.\r\n                for (let i = 0; i < node.children.length; i++) {\r\n                    const childType = getConstantType(node.children[i], context);\r\n                    if (childType === 0 /* NOT_CONSTANT */) {\r\n                        constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                        return 0 /* NOT_CONSTANT */;\r\n                    }\r\n                    if (childType < returnType) {\r\n                        returnType = childType;\r\n                    }\r\n                }\r\n                // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0\r\n                // type, check if any of the props can cause the type to be lowered\r\n                // we can skip can_patch because it's guaranteed by the absence of a\r\n                // patchFlag.\r\n                if (returnType > 1 /* CAN_SKIP_PATCH */) {\r\n                    for (let i = 0; i < node.props.length; i++) {\r\n                        const p = node.props[i];\r\n                        if (p.type === 7 /* DIRECTIVE */ && p.name === 'bind' && p.exp) {\r\n                            const expType = getConstantType(p.exp, context);\r\n                            if (expType === 0 /* NOT_CONSTANT */) {\r\n                                constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                                return 0 /* NOT_CONSTANT */;\r\n                            }\r\n                            if (expType < returnType) {\r\n                                returnType = expType;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // only svg/foreignObject could be block here, however if they are\r\n                // static then they don't need to be blocks since there will be no\r\n                // nested updates.\r\n                if (codegenNode.isBlock) {\r\n                    codegenNode.isBlock = false;\r\n                    context.helper(CREATE_VNODE);\r\n                }\r\n                constantCache.set(node, returnType);\r\n                return returnType;\r\n            }\r\n            else {\r\n                constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return 3 /* CAN_STRINGIFY */;\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n        case 10 /* IF_BRANCH */:\r\n            return 0 /* NOT_CONSTANT */;\r\n        case 5 /* INTERPOLATION */:\r\n        case 12 /* TEXT_CALL */:\r\n            return getConstantType(node.content, context);\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            return node.constType;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            let returnType = 3 /* CAN_STRINGIFY */;\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                if (isString(child) || isSymbol(child)) {\r\n                    continue;\r\n                }\r\n                const childType = getConstantType(child, context);\r\n                if (childType === 0 /* NOT_CONSTANT */) {\r\n                    return 0 /* NOT_CONSTANT */;\r\n                }\r\n                else if (childType < returnType) {\r\n                    returnType = childType;\r\n                }\r\n            }\r\n            return returnType;\r\n        default:\r\n            if ((process.env.NODE_ENV !== 'production')) ;\r\n            return 0 /* NOT_CONSTANT */;\r\n    }\r\n}\r\nfunction getGeneratedPropsConstantType(node, context) {\r\n    let returnType = 3 /* CAN_STRINGIFY */;\r\n    const props = getNodeProps(node);\r\n    if (props && props.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n        const { properties } = props;\r\n        for (let i = 0; i < properties.length; i++) {\r\n            const { key, value } = properties[i];\r\n            const keyType = getConstantType(key, context);\r\n            if (keyType === 0 /* NOT_CONSTANT */) {\r\n                return keyType;\r\n            }\r\n            if (keyType < returnType) {\r\n                returnType = keyType;\r\n            }\r\n            if (value.type !== 4 /* SIMPLE_EXPRESSION */) {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            const valueType = getConstantType(value, context);\r\n            if (valueType === 0 /* NOT_CONSTANT */) {\r\n                return valueType;\r\n            }\r\n            if (valueType < returnType) {\r\n                returnType = valueType;\r\n            }\r\n        }\r\n    }\r\n    return returnType;\r\n}\r\nfunction getNodeProps(node) {\r\n    const codegenNode = node.codegenNode;\r\n    if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n        return codegenNode.props;\r\n    }\r\n}\r\nfunction getPatchFlag(node) {\r\n    const flag = node.patchFlag;\r\n    return flag ? parseInt(flag, 10) : undefined;\r\n}\n\nfunction createTransformContext(root, { filename = '', prefixIdentifiers = false, hoistStatic = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = NOOP, isCustomElement = NOOP, expressionPlugins = [], scopeId = null, ssr = false, ssrCssVars = ``, bindingMetadata = EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError }) {\r\n    const nameMatch = filename.replace(/\\?.*$/, '').match(/([^/\\\\]+)\\.\\w+$/);\r\n    const context = {\r\n        // options\r\n        selfName: nameMatch && capitalize(camelize$1(nameMatch[1])),\r\n        prefixIdentifiers,\r\n        hoistStatic,\r\n        cacheHandlers,\r\n        nodeTransforms,\r\n        directiveTransforms,\r\n        transformHoist,\r\n        isBuiltInComponent,\r\n        isCustomElement,\r\n        expressionPlugins,\r\n        scopeId,\r\n        ssr,\r\n        ssrCssVars,\r\n        bindingMetadata,\r\n        inline,\r\n        isTS,\r\n        onError,\r\n        // state\r\n        root,\r\n        helpers: new Set(),\r\n        components: new Set(),\r\n        directives: new Set(),\r\n        hoists: [],\r\n        imports: [],\r\n        constantCache: new Map(),\r\n        temps: 0,\r\n        cached: 0,\r\n        identifiers: Object.create(null),\r\n        scopes: {\r\n            vFor: 0,\r\n            vSlot: 0,\r\n            vPre: 0,\r\n            vOnce: 0\r\n        },\r\n        parent: null,\r\n        currentNode: root,\r\n        childIndex: 0,\r\n        // methods\r\n        helper(name) {\r\n            context.helpers.add(name);\r\n            return name;\r\n        },\r\n        helperString(name) {\r\n            return `_${helperNameMap[context.helper(name)]}`;\r\n        },\r\n        replaceNode(node) {\r\n            /* istanbul ignore if */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!context.currentNode) {\r\n                    throw new Error(`Node being replaced is already removed.`);\r\n                }\r\n                if (!context.parent) {\r\n                    throw new Error(`Cannot replace root node.`);\r\n                }\r\n            }\r\n            context.parent.children[context.childIndex] = context.currentNode = node;\r\n        },\r\n        removeNode(node) {\r\n            if ((process.env.NODE_ENV !== 'production') && !context.parent) {\r\n                throw new Error(`Cannot remove root node.`);\r\n            }\r\n            const list = context.parent.children;\r\n            const removalIndex = node\r\n                ? list.indexOf(node)\r\n                : context.currentNode\r\n                    ? context.childIndex\r\n                    : -1;\r\n            /* istanbul ignore if */\r\n            if ((process.env.NODE_ENV !== 'production') && removalIndex < 0) {\r\n                throw new Error(`node being removed is not a child of current parent`);\r\n            }\r\n            if (!node || node === context.currentNode) {\r\n                // current node removed\r\n                context.currentNode = null;\r\n                context.onNodeRemoved();\r\n            }\r\n            else {\r\n                // sibling node removed\r\n                if (context.childIndex > removalIndex) {\r\n                    context.childIndex--;\r\n                    context.onNodeRemoved();\r\n                }\r\n            }\r\n            context.parent.children.splice(removalIndex, 1);\r\n        },\r\n        onNodeRemoved: () => { },\r\n        addIdentifiers(exp) {\r\n        },\r\n        removeIdentifiers(exp) {\r\n        },\r\n        hoist(exp) {\r\n            context.hoists.push(exp);\r\n            const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2 /* CAN_HOIST */);\r\n            identifier.hoisted = exp;\r\n            return identifier;\r\n        },\r\n        cache(exp, isVNode = false) {\r\n            return createCacheExpression(++context.cached, exp, isVNode);\r\n        }\r\n    };\r\n    return context;\r\n}\r\nfunction transform(root, options) {\r\n    const context = createTransformContext(root, options);\r\n    traverseNode(root, context);\r\n    if (options.hoistStatic) {\r\n        hoistStatic(root, context);\r\n    }\r\n    if (!options.ssr) {\r\n        createRootCodegen(root, context);\r\n    }\r\n    // finalize meta information\r\n    root.helpers = [...context.helpers];\r\n    root.components = [...context.components];\r\n    root.directives = [...context.directives];\r\n    root.imports = context.imports;\r\n    root.hoists = context.hoists;\r\n    root.temps = context.temps;\r\n    root.cached = context.cached;\r\n}\r\nfunction createRootCodegen(root, context) {\r\n    const { helper } = context;\r\n    const { children } = root;\r\n    if (children.length === 1) {\r\n        const child = children[0];\r\n        // if the single child is an element, turn it into a block.\r\n        if (isSingleElementRoot(root, child) && child.codegenNode) {\r\n            // single element root is never hoisted so codegenNode will never be\r\n            // SimpleExpressionNode\r\n            const codegenNode = child.codegenNode;\r\n            if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n                codegenNode.isBlock = true;\r\n                helper(OPEN_BLOCK);\r\n                helper(CREATE_BLOCK);\r\n            }\r\n            root.codegenNode = codegenNode;\r\n        }\r\n        else {\r\n            // - single <slot/>, IfNode, ForNode: already blocks.\r\n            // - single text node: always patched.\r\n            // root codegen falls through via genNode()\r\n            root.codegenNode = child;\r\n        }\r\n    }\r\n    else if (children.length > 1) {\r\n        // root has multiple nodes - return a fragment block.\r\n        let patchFlag = 64 /* STABLE_FRAGMENT */;\r\n        let patchFlagText = PatchFlagNames[64 /* STABLE_FRAGMENT */];\r\n        // check if the fragment actually contains a single valid child with\r\n        // the rest being comments\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            children.filter(c => c.type !== 3 /* COMMENT */).length === 1) {\r\n            patchFlag |= 2048 /* DEV_ROOT_FRAGMENT */;\r\n            patchFlagText += `, ${PatchFlagNames[2048 /* DEV_ROOT_FRAGMENT */]}`;\r\n        }\r\n        root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, patchFlag + ((process.env.NODE_ENV !== 'production') ? ` /* ${patchFlagText} */` : ``), undefined, undefined, true);\r\n    }\r\n    else ;\r\n}\r\nfunction traverseChildren(parent, context) {\r\n    let i = 0;\r\n    const nodeRemoved = () => {\r\n        i--;\r\n    };\r\n    for (; i < parent.children.length; i++) {\r\n        const child = parent.children[i];\r\n        if (isString(child))\r\n            continue;\r\n        context.parent = parent;\r\n        context.childIndex = i;\r\n        context.onNodeRemoved = nodeRemoved;\r\n        traverseNode(child, context);\r\n    }\r\n}\r\nfunction traverseNode(node, context) {\r\n    context.currentNode = node;\r\n    // apply transform plugins\r\n    const { nodeTransforms } = context;\r\n    const exitFns = [];\r\n    for (let i = 0; i < nodeTransforms.length; i++) {\r\n        const onExit = nodeTransforms[i](node, context);\r\n        if (onExit) {\r\n            if (isArray(onExit)) {\r\n                exitFns.push(...onExit);\r\n            }\r\n            else {\r\n                exitFns.push(onExit);\r\n            }\r\n        }\r\n        if (!context.currentNode) {\r\n            // node was removed\r\n            return;\r\n        }\r\n        else {\r\n            // node may have been replaced\r\n            node = context.currentNode;\r\n        }\r\n    }\r\n    switch (node.type) {\r\n        case 3 /* COMMENT */:\r\n            if (!context.ssr) {\r\n                // inject import for the Comment symbol, which is needed for creating\r\n                // comment nodes with `createVNode`\r\n                context.helper(CREATE_COMMENT);\r\n            }\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            // no need to traverse, but we need to inject toString helper\r\n            if (!context.ssr) {\r\n                context.helper(TO_DISPLAY_STRING);\r\n            }\r\n            break;\r\n        // for container types, further traverse downwards\r\n        case 9 /* IF */:\r\n            for (let i = 0; i < node.branches.length; i++) {\r\n                traverseNode(node.branches[i], context);\r\n            }\r\n            break;\r\n        case 10 /* IF_BRANCH */:\r\n        case 11 /* FOR */:\r\n        case 1 /* ELEMENT */:\r\n        case 0 /* ROOT */:\r\n            traverseChildren(node, context);\r\n            break;\r\n    }\r\n    // exit transforms\r\n    context.currentNode = node;\r\n    let i = exitFns.length;\r\n    while (i--) {\r\n        exitFns[i]();\r\n    }\r\n}\r\nfunction createStructuralDirectiveTransform(name, fn) {\r\n    const matches = isString(name)\r\n        ? (n) => n === name\r\n        : (n) => name.test(n);\r\n    return (node, context) => {\r\n        if (node.type === 1 /* ELEMENT */) {\r\n            const { props } = node;\r\n            // structural directive transforms are not concerned with slots\r\n            // as they are handled separately in vSlot.ts\r\n            if (node.tagType === 3 /* TEMPLATE */ && props.some(isVSlot)) {\r\n                return;\r\n            }\r\n            const exitFns = [];\r\n            for (let i = 0; i < props.length; i++) {\r\n                const prop = props[i];\r\n                if (prop.type === 7 /* DIRECTIVE */ && matches(prop.name)) {\r\n                    // structural directives are removed to avoid infinite recursion\r\n                    // also we remove them *before* applying so that it can further\r\n                    // traverse itself in case it moves the node around\r\n                    props.splice(i, 1);\r\n                    i--;\r\n                    const onExit = fn(node, prop, context);\r\n                    if (onExit)\r\n                        exitFns.push(onExit);\r\n                }\r\n            }\r\n            return exitFns;\r\n        }\r\n    };\r\n}\n\nconst PURE_ANNOTATION = `/*#__PURE__*/`;\r\nfunction createCodegenContext(ast, { mode = 'function', prefixIdentifiers = mode === 'module', sourceMap = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssr = false }) {\r\n    const context = {\r\n        mode,\r\n        prefixIdentifiers,\r\n        sourceMap,\r\n        filename,\r\n        scopeId,\r\n        optimizeImports,\r\n        runtimeGlobalName,\r\n        runtimeModuleName,\r\n        ssr,\r\n        source: ast.loc.source,\r\n        code: ``,\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        indentLevel: 0,\r\n        pure: false,\r\n        map: undefined,\r\n        helper(key) {\r\n            return `_${helperNameMap[key]}`;\r\n        },\r\n        push(code, node) {\r\n            context.code += code;\r\n        },\r\n        indent() {\r\n            newline(++context.indentLevel);\r\n        },\r\n        deindent(withoutNewLine = false) {\r\n            if (withoutNewLine) {\r\n                --context.indentLevel;\r\n            }\r\n            else {\r\n                newline(--context.indentLevel);\r\n            }\r\n        },\r\n        newline() {\r\n            newline(context.indentLevel);\r\n        }\r\n    };\r\n    function newline(n) {\r\n        context.push('\\n' + `  `.repeat(n));\r\n    }\r\n    return context;\r\n}\r\nfunction generate(ast, options = {}) {\r\n    const context = createCodegenContext(ast, options);\r\n    if (options.onContextCreated)\r\n        options.onContextCreated(context);\r\n    const { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } = context;\r\n    const hasHelpers = ast.helpers.length > 0;\r\n    const useWithBlock = !prefixIdentifiers && mode !== 'module';\r\n    // preambles\r\n    // in setup() inline mode, the preamble is generated in a sub context\r\n    // and returned separately.\r\n    const preambleContext = context;\r\n    {\r\n        genFunctionPreamble(ast, preambleContext);\r\n    }\r\n    // enter render function\r\n    const functionName = ssr ? `ssrRender` : `render`;\r\n    const args = ssr ? ['_ctx', '_push', '_parent', '_attrs'] : ['_ctx', '_cache'];\r\n    const signature = args.join(', ');\r\n    {\r\n        push(`function ${functionName}(${signature}) {`);\r\n    }\r\n    indent();\r\n    if (useWithBlock) {\r\n        push(`with (_ctx) {`);\r\n        indent();\r\n        // function mode const declarations should be inside with block\r\n        // also they should be renamed to avoid collision with user properties\r\n        if (hasHelpers) {\r\n            push(`const { ${ast.helpers\r\n                .map(s => `${helperNameMap[s]}: _${helperNameMap[s]}`)\r\n                .join(', ')} } = _Vue`);\r\n            push(`\\n`);\r\n            newline();\r\n        }\r\n    }\r\n    // generate asset resolution statements\r\n    if (ast.components.length) {\r\n        genAssets(ast.components, 'component', context);\r\n        if (ast.directives.length || ast.temps > 0) {\r\n            newline();\r\n        }\r\n    }\r\n    if (ast.directives.length) {\r\n        genAssets(ast.directives, 'directive', context);\r\n        if (ast.temps > 0) {\r\n            newline();\r\n        }\r\n    }\r\n    if (ast.temps > 0) {\r\n        push(`let `);\r\n        for (let i = 0; i < ast.temps; i++) {\r\n            push(`${i > 0 ? `, ` : ``}_temp${i}`);\r\n        }\r\n    }\r\n    if (ast.components.length || ast.directives.length || ast.temps) {\r\n        push(`\\n`);\r\n        newline();\r\n    }\r\n    // generate the VNode tree expression\r\n    if (!ssr) {\r\n        push(`return `);\r\n    }\r\n    if (ast.codegenNode) {\r\n        genNode(ast.codegenNode, context);\r\n    }\r\n    else {\r\n        push(`null`);\r\n    }\r\n    if (useWithBlock) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n    deindent();\r\n    push(`}`);\r\n    return {\r\n        ast,\r\n        code: context.code,\r\n        preamble: ``,\r\n        // SourceMapGenerator does have toJSON() method but it's not in the types\r\n        map: context.map ? context.map.toJSON() : undefined\r\n    };\r\n}\r\nfunction genFunctionPreamble(ast, context) {\r\n    const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName } = context;\r\n    const VueBinding = runtimeGlobalName;\r\n    const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;\r\n    // Generate const declaration for helpers\r\n    // In prefix mode, we place the const declaration at top so it's done\r\n    // only once; But if we not prefixing, we place the declaration inside the\r\n    // with block so it doesn't incur the `in` check cost for every helper access.\r\n    if (ast.helpers.length > 0) {\r\n        {\r\n            // \"with\" mode.\r\n            // save Vue in a separate variable to avoid collision\r\n            push(`const _Vue = ${VueBinding}\\n`);\r\n            // in \"with\" mode, helpers are declared inside the with block to avoid\r\n            // has check cost, but hoists are lifted out of the function - we need\r\n            // to provide the helper here.\r\n            if (ast.hoists.length) {\r\n                const staticHelpers = [\r\n                    CREATE_VNODE,\r\n                    CREATE_COMMENT,\r\n                    CREATE_TEXT,\r\n                    CREATE_STATIC\r\n                ]\r\n                    .filter(helper => ast.helpers.includes(helper))\r\n                    .map(aliasHelper)\r\n                    .join(', ');\r\n                push(`const { ${staticHelpers} } = _Vue\\n`);\r\n            }\r\n        }\r\n    }\r\n    genHoists(ast.hoists, context);\r\n    newline();\r\n    push(`return `);\r\n}\r\nfunction genAssets(assets, type, { helper, push, newline }) {\r\n    const resolver = helper(type === 'component' ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);\r\n    for (let i = 0; i < assets.length; i++) {\r\n        const id = assets[i];\r\n        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)})`);\r\n        if (i < assets.length - 1) {\r\n            newline();\r\n        }\r\n    }\r\n}\r\nfunction genHoists(hoists, context) {\r\n    if (!hoists.length) {\r\n        return;\r\n    }\r\n    context.pure = true;\r\n    const { push, newline, helper, scopeId, mode } = context;\r\n    newline();\r\n    hoists.forEach((exp, i) => {\r\n        if (exp) {\r\n            push(`const _hoisted_${i + 1} = `);\r\n            genNode(exp, context);\r\n            newline();\r\n        }\r\n    });\r\n    context.pure = false;\r\n}\r\nfunction isText$1(n) {\r\n    return (isString(n) ||\r\n        n.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n        n.type === 2 /* TEXT */ ||\r\n        n.type === 5 /* INTERPOLATION */ ||\r\n        n.type === 8 /* COMPOUND_EXPRESSION */);\r\n}\r\nfunction genNodeListAsArray(nodes, context) {\r\n    const multilines = nodes.length > 3 ||\r\n        (((process.env.NODE_ENV !== 'production')) && nodes.some(n => isArray(n) || !isText$1(n)));\r\n    context.push(`[`);\r\n    multilines && context.indent();\r\n    genNodeList(nodes, context, multilines);\r\n    multilines && context.deindent();\r\n    context.push(`]`);\r\n}\r\nfunction genNodeList(nodes, context, multilines = false, comma = true) {\r\n    const { push, newline } = context;\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i];\r\n        if (isString(node)) {\r\n            push(node);\r\n        }\r\n        else if (isArray(node)) {\r\n            genNodeListAsArray(node, context);\r\n        }\r\n        else {\r\n            genNode(node, context);\r\n        }\r\n        if (i < nodes.length - 1) {\r\n            if (multilines) {\r\n                comma && push(',');\r\n                newline();\r\n            }\r\n            else {\r\n                comma && push(', ');\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction genNode(node, context) {\r\n    if (isString(node)) {\r\n        context.push(node);\r\n        return;\r\n    }\r\n    if (isSymbol(node)) {\r\n        context.push(context.helper(node));\r\n        return;\r\n    }\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                assert(node.codegenNode != null, `Codegen node is missing for element/if/for node. ` +\r\n                    `Apply appropriate transforms first.`);\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 2 /* TEXT */:\r\n            genText(node, context);\r\n            break;\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            genExpression(node, context);\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            genInterpolation(node, context);\r\n            break;\r\n        case 12 /* TEXT_CALL */:\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            genCompoundExpression(node, context);\r\n            break;\r\n        case 3 /* COMMENT */:\r\n            genComment(node, context);\r\n            break;\r\n        case 13 /* VNODE_CALL */:\r\n            genVNodeCall(node, context);\r\n            break;\r\n        case 14 /* JS_CALL_EXPRESSION */:\r\n            genCallExpression(node, context);\r\n            break;\r\n        case 15 /* JS_OBJECT_EXPRESSION */:\r\n            genObjectExpression(node, context);\r\n            break;\r\n        case 17 /* JS_ARRAY_EXPRESSION */:\r\n            genArrayExpression(node, context);\r\n            break;\r\n        case 18 /* JS_FUNCTION_EXPRESSION */:\r\n            genFunctionExpression(node, context);\r\n            break;\r\n        case 19 /* JS_CONDITIONAL_EXPRESSION */:\r\n            genConditionalExpression(node, context);\r\n            break;\r\n        case 20 /* JS_CACHE_EXPRESSION */:\r\n            genCacheExpression(node, context);\r\n            break;\r\n        // SSR only types\r\n        case 21 /* JS_BLOCK_STATEMENT */:\r\n            break;\r\n        case 22 /* JS_TEMPLATE_LITERAL */:\r\n            break;\r\n        case 23 /* JS_IF_STATEMENT */:\r\n            break;\r\n        case 24 /* JS_ASSIGNMENT_EXPRESSION */:\r\n            break;\r\n        case 25 /* JS_SEQUENCE_EXPRESSION */:\r\n            break;\r\n        case 26 /* JS_RETURN_STATEMENT */:\r\n            break;\r\n        /* istanbul ignore next */\r\n        case 10 /* IF_BRANCH */:\r\n            // noop\r\n            break;\r\n        default:\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                assert(false, `unhandled codegen node type: ${node.type}`);\r\n                // make sure we exhaust all possible types\r\n                const exhaustiveCheck = node;\r\n                return exhaustiveCheck;\r\n            }\r\n    }\r\n}\r\nfunction genText(node, context) {\r\n    context.push(JSON.stringify(node.content), node);\r\n}\r\nfunction genExpression(node, context) {\r\n    const { content, isStatic } = node;\r\n    context.push(isStatic ? JSON.stringify(content) : content, node);\r\n}\r\nfunction genInterpolation(node, context) {\r\n    const { push, helper, pure } = context;\r\n    if (pure)\r\n        push(PURE_ANNOTATION);\r\n    push(`${helper(TO_DISPLAY_STRING)}(`);\r\n    genNode(node.content, context);\r\n    push(`)`);\r\n}\r\nfunction genCompoundExpression(node, context) {\r\n    for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i];\r\n        if (isString(child)) {\r\n            context.push(child);\r\n        }\r\n        else {\r\n            genNode(child, context);\r\n        }\r\n    }\r\n}\r\nfunction genExpressionAsPropertyKey(node, context) {\r\n    const { push } = context;\r\n    if (node.type === 8 /* COMPOUND_EXPRESSION */) {\r\n        push(`[`);\r\n        genCompoundExpression(node, context);\r\n        push(`]`);\r\n    }\r\n    else if (node.isStatic) {\r\n        // only quote keys if necessary\r\n        const text = isSimpleIdentifier(node.content)\r\n            ? node.content\r\n            : JSON.stringify(node.content);\r\n        push(text, node);\r\n    }\r\n    else {\r\n        push(`[${node.content}]`, node);\r\n    }\r\n}\r\nfunction genComment(node, context) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const { push, helper, pure } = context;\r\n        if (pure) {\r\n            push(PURE_ANNOTATION);\r\n        }\r\n        push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);\r\n    }\r\n}\r\nfunction genVNodeCall(node, context) {\r\n    const { push, helper, pure } = context;\r\n    const { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking } = node;\r\n    if (directives) {\r\n        push(helper(WITH_DIRECTIVES) + `(`);\r\n    }\r\n    if (isBlock) {\r\n        push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);\r\n    }\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    push(helper(isBlock ? CREATE_BLOCK : CREATE_VNODE) + `(`, node);\r\n    genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context);\r\n    push(`)`);\r\n    if (isBlock) {\r\n        push(`)`);\r\n    }\r\n    if (directives) {\r\n        push(`, `);\r\n        genNode(directives, context);\r\n        push(`)`);\r\n    }\r\n}\r\nfunction genNullableArgs(args) {\r\n    let i = args.length;\r\n    while (i--) {\r\n        if (args[i] != null)\r\n            break;\r\n    }\r\n    return args.slice(0, i + 1).map(arg => arg || `null`);\r\n}\r\n// JavaScript\r\nfunction genCallExpression(node, context) {\r\n    const { push, helper, pure } = context;\r\n    const callee = isString(node.callee) ? node.callee : helper(node.callee);\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    push(callee + `(`, node);\r\n    genNodeList(node.arguments, context);\r\n    push(`)`);\r\n}\r\nfunction genObjectExpression(node, context) {\r\n    const { push, indent, deindent, newline } = context;\r\n    const { properties } = node;\r\n    if (!properties.length) {\r\n        push(`{}`, node);\r\n        return;\r\n    }\r\n    const multilines = properties.length > 1 ||\r\n        (((process.env.NODE_ENV !== 'production')) &&\r\n            properties.some(p => p.value.type !== 4 /* SIMPLE_EXPRESSION */));\r\n    push(multilines ? `{` : `{ `);\r\n    multilines && indent();\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const { key, value } = properties[i];\r\n        // key\r\n        genExpressionAsPropertyKey(key, context);\r\n        push(`: `);\r\n        // value\r\n        genNode(value, context);\r\n        if (i < properties.length - 1) {\r\n            // will only reach this if it's multilines\r\n            push(`,`);\r\n            newline();\r\n        }\r\n    }\r\n    multilines && deindent();\r\n    push(multilines ? `}` : ` }`);\r\n}\r\nfunction genArrayExpression(node, context) {\r\n    genNodeListAsArray(node.elements, context);\r\n}\r\nfunction genFunctionExpression(node, context) {\r\n    const { push, indent, deindent, scopeId, mode } = context;\r\n    const { params, returns, body, newline, isSlot } = node;\r\n    if (isSlot) {\r\n        push(`_${helperNameMap[WITH_CTX]}(`);\r\n    }\r\n    push(`(`, node);\r\n    if (isArray(params)) {\r\n        genNodeList(params, context);\r\n    }\r\n    else if (params) {\r\n        genNode(params, context);\r\n    }\r\n    push(`) => `);\r\n    if (newline || body) {\r\n        push(`{`);\r\n        indent();\r\n    }\r\n    if (returns) {\r\n        if (newline) {\r\n            push(`return `);\r\n        }\r\n        if (isArray(returns)) {\r\n            genNodeListAsArray(returns, context);\r\n        }\r\n        else {\r\n            genNode(returns, context);\r\n        }\r\n    }\r\n    else if (body) {\r\n        genNode(body, context);\r\n    }\r\n    if (newline || body) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n    if (isSlot) {\r\n        push(`)`);\r\n    }\r\n}\r\nfunction genConditionalExpression(node, context) {\r\n    const { test, consequent, alternate, newline: needNewline } = node;\r\n    const { push, indent, deindent, newline } = context;\r\n    if (test.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        const needsParens = !isSimpleIdentifier(test.content);\r\n        needsParens && push(`(`);\r\n        genExpression(test, context);\r\n        needsParens && push(`)`);\r\n    }\r\n    else {\r\n        push(`(`);\r\n        genNode(test, context);\r\n        push(`)`);\r\n    }\r\n    needNewline && indent();\r\n    context.indentLevel++;\r\n    needNewline || push(` `);\r\n    push(`? `);\r\n    genNode(consequent, context);\r\n    context.indentLevel--;\r\n    needNewline && newline();\r\n    needNewline || push(` `);\r\n    push(`: `);\r\n    const isNested = alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */;\r\n    if (!isNested) {\r\n        context.indentLevel++;\r\n    }\r\n    genNode(alternate, context);\r\n    if (!isNested) {\r\n        context.indentLevel--;\r\n    }\r\n    needNewline && deindent(true /* without newline */);\r\n}\r\nfunction genCacheExpression(node, context) {\r\n    const { push, helper, indent, deindent, newline } = context;\r\n    push(`_cache[${node.index}] || (`);\r\n    if (node.isVNode) {\r\n        indent();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);\r\n        newline();\r\n    }\r\n    push(`_cache[${node.index}] = `);\r\n    genNode(node.value, context);\r\n    if (node.isVNode) {\r\n        push(`,`);\r\n        newline();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(1),`);\r\n        newline();\r\n        push(`_cache[${node.index}]`);\r\n        deindent();\r\n    }\r\n    push(`)`);\r\n}\n\n// these keywords should not appear inside expressions, but operators like\r\n// typeof, instanceof and in are allowed\r\nconst prohibitedKeywordRE = new RegExp('\\\\b' +\r\n    ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n        'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n        'extends,finally,continue,debugger,function,arguments,typeof,void')\r\n        .split(',')\r\n        .join('\\\\b|\\\\b') +\r\n    '\\\\b');\r\n// strip strings in expressions\r\nconst stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n/**\r\n * Validate a non-prefixed expression.\r\n * This is only called when using the in-browser runtime compiler since it\r\n * doesn't prefix expressions.\r\n */\r\nfunction validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {\r\n    const exp = node.content;\r\n    // empty expressions are validated per-directive since some directives\r\n    // do allow empty expressions.\r\n    if (!exp.trim()) {\r\n        return;\r\n    }\r\n    try {\r\n        new Function(asRawStatements\r\n            ? ` ${exp} `\r\n            : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`);\r\n    }\r\n    catch (e) {\r\n        let message = e.message;\r\n        const keywordMatch = exp\r\n            .replace(stripStringRE, '')\r\n            .match(prohibitedKeywordRE);\r\n        if (keywordMatch) {\r\n            message = `avoid using JavaScript keyword as property name: \"${keywordMatch[0]}\"`;\r\n        }\r\n        context.onError(createCompilerError(43 /* X_INVALID_EXPRESSION */, node.loc, undefined, message));\r\n    }\r\n}\n\nconst transformExpression = (node, context) => {\r\n    if (node.type === 5 /* INTERPOLATION */) {\r\n        node.content = processExpression(node.content, context);\r\n    }\r\n    else if (node.type === 1 /* ELEMENT */) {\r\n        // handle directives on element\r\n        for (let i = 0; i < node.props.length; i++) {\r\n            const dir = node.props[i];\r\n            // do not process for v-on & v-for since they are special handled\r\n            if (dir.type === 7 /* DIRECTIVE */ && dir.name !== 'for') {\r\n                const exp = dir.exp;\r\n                const arg = dir.arg;\r\n                // do not process exp if this is v-on:arg - we need special handling\r\n                // for wrapping inline statements.\r\n                if (exp &&\r\n                    exp.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                    !(dir.name === 'on' && arg)) {\r\n                    dir.exp = processExpression(exp, context, \r\n                    // slot args must be processed as function params\r\n                    dir.name === 'slot');\r\n                }\r\n                if (arg && arg.type === 4 /* SIMPLE_EXPRESSION */ && !arg.isStatic) {\r\n                    dir.arg = processExpression(arg, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n// Important: since this function uses Node.js only dependencies, it should\r\n// always be used with a leading !true check so that it can be\r\n// tree-shaken from the browser build.\r\nfunction processExpression(node, context, \r\n// some expressions like v-slot props & v-for aliases should be parsed as\r\n// function params\r\nasParams = false, \r\n// v-on handler values may contain multiple statements\r\nasRawStatements = false) {\r\n    {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            // simple in-browser validation (same logic in 2.x)\r\n            validateBrowserExpression(node, context, asParams, asRawStatements);\r\n        }\r\n        return node;\r\n    }\r\n}\n\nconst transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {\r\n    return processIf(node, dir, context, (ifNode, branch, isRoot) => {\r\n        // #1587: We need to dynamically increment the key based on the current\r\n        // node's sibling nodes, since chained v-if/else branches are\r\n        // rendered at the same depth\r\n        const siblings = context.parent.children;\r\n        let i = siblings.indexOf(ifNode);\r\n        let key = 0;\r\n        while (i-- >= 0) {\r\n            const sibling = siblings[i];\r\n            if (sibling && sibling.type === 9 /* IF */) {\r\n                key += sibling.branches.length;\r\n            }\r\n        }\r\n        // Exit callback. Complete the codegenNode when all children have been\r\n        // transformed.\r\n        return () => {\r\n            if (isRoot) {\r\n                ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);\r\n            }\r\n            else {\r\n                // attach this branch's codegen node to the v-if root.\r\n                const parentCondition = getParentCondition(ifNode.codegenNode);\r\n                parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);\r\n            }\r\n        };\r\n    });\r\n});\r\n// target-agnostic transform used for both Client and SSR\r\nfunction processIf(node, dir, context, processCodegen) {\r\n    if (dir.name !== 'else' &&\r\n        (!dir.exp || !dir.exp.content.trim())) {\r\n        const loc = dir.exp ? dir.exp.loc : node.loc;\r\n        context.onError(createCompilerError(27 /* X_V_IF_NO_EXPRESSION */, dir.loc));\r\n        dir.exp = createSimpleExpression(`true`, false, loc);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && true && dir.exp) {\r\n        validateBrowserExpression(dir.exp, context);\r\n    }\r\n    if (dir.name === 'if') {\r\n        const branch = createIfBranch(node, dir);\r\n        const ifNode = {\r\n            type: 9 /* IF */,\r\n            loc: node.loc,\r\n            branches: [branch]\r\n        };\r\n        context.replaceNode(ifNode);\r\n        if (processCodegen) {\r\n            return processCodegen(ifNode, branch, true);\r\n        }\r\n    }\r\n    else {\r\n        // locate the adjacent v-if\r\n        const siblings = context.parent.children;\r\n        const comments = [];\r\n        let i = siblings.indexOf(node);\r\n        while (i-- >= -1) {\r\n            const sibling = siblings[i];\r\n            if ((process.env.NODE_ENV !== 'production') && sibling && sibling.type === 3 /* COMMENT */) {\r\n                context.removeNode(sibling);\r\n                comments.unshift(sibling);\r\n                continue;\r\n            }\r\n            if (sibling &&\r\n                sibling.type === 2 /* TEXT */ &&\r\n                !sibling.content.trim().length) {\r\n                context.removeNode(sibling);\r\n                continue;\r\n            }\r\n            if (sibling && sibling.type === 9 /* IF */) {\r\n                // move the node to the if node's branches\r\n                context.removeNode();\r\n                const branch = createIfBranch(node, dir);\r\n                if ((process.env.NODE_ENV !== 'production') && comments.length) {\r\n                    branch.children = [...comments, ...branch.children];\r\n                }\r\n                // check if user is forcing same key on different branches\r\n                if ((process.env.NODE_ENV !== 'production') || !true) {\r\n                    const key = branch.userKey;\r\n                    if (key) {\r\n                        sibling.branches.forEach(({ userKey }) => {\r\n                            if (isSameKey(userKey, key)) {\r\n                                context.onError(createCompilerError(28 /* X_V_IF_SAME_KEY */, branch.userKey.loc));\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                sibling.branches.push(branch);\r\n                const onExit = processCodegen && processCodegen(sibling, branch, false);\r\n                // since the branch was removed, it will not be traversed.\r\n                // make sure to traverse here.\r\n                traverseNode(branch, context);\r\n                // call on exit\r\n                if (onExit)\r\n                    onExit();\r\n                // make sure to reset currentNode after traversal to indicate this\r\n                // node has been removed.\r\n                context.currentNode = null;\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(29 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\nfunction createIfBranch(node, dir) {\r\n    return {\r\n        type: 10 /* IF_BRANCH */,\r\n        loc: node.loc,\r\n        condition: dir.name === 'else' ? undefined : dir.exp,\r\n        children: node.tagType === 3 /* TEMPLATE */ && !findDir(node, 'for')\r\n            ? node.children\r\n            : [node],\r\n        userKey: findProp(node, `key`)\r\n    };\r\n}\r\nfunction createCodegenNodeForBranch(branch, keyIndex, context) {\r\n    if (branch.condition) {\r\n        return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), \r\n        // make sure to pass in asBlock: true so that the comment node call\r\n        // closes the current block.\r\n        createCallExpression(context.helper(CREATE_COMMENT), [\r\n            (process.env.NODE_ENV !== 'production') ? '\"v-if\"' : '\"\"',\r\n            'true'\r\n        ]));\r\n    }\r\n    else {\r\n        return createChildrenCodegenNode(branch, keyIndex, context);\r\n    }\r\n}\r\nfunction createChildrenCodegenNode(branch, keyIndex, context) {\r\n    const { helper } = context;\r\n    const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2 /* CAN_HOIST */));\r\n    const { children } = branch;\r\n    const firstChild = children[0];\r\n    const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1 /* ELEMENT */;\r\n    if (needFragmentWrapper) {\r\n        if (children.length === 1 && firstChild.type === 11 /* FOR */) {\r\n            // optimize away nested fragments when child is a ForNode\r\n            const vnodeCall = firstChild.codegenNode;\r\n            injectProp(vnodeCall, keyProperty, context);\r\n            return vnodeCall;\r\n        }\r\n        else {\r\n            return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, 64 /* STABLE_FRAGMENT */ +\r\n                ((process.env.NODE_ENV !== 'production')\r\n                    ? ` /* ${PatchFlagNames[64 /* STABLE_FRAGMENT */]} */`\r\n                    : ``), undefined, undefined, true, false, branch.loc);\r\n        }\r\n    }\r\n    else {\r\n        const vnodeCall = firstChild\r\n            .codegenNode;\r\n        // Change createVNode to createBlock.\r\n        if (vnodeCall.type === 13 /* VNODE_CALL */) {\r\n            vnodeCall.isBlock = true;\r\n            helper(OPEN_BLOCK);\r\n            helper(CREATE_BLOCK);\r\n        }\r\n        // inject branch key\r\n        injectProp(vnodeCall, keyProperty, context);\r\n        return vnodeCall;\r\n    }\r\n}\r\nfunction isSameKey(a, b) {\r\n    if (!a || a.type !== b.type) {\r\n        return false;\r\n    }\r\n    if (a.type === 6 /* ATTRIBUTE */) {\r\n        if (a.value.content !== b.value.content) {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        // directive\r\n        const exp = a.exp;\r\n        const branchExp = b.exp;\r\n        if (exp.type !== branchExp.type) {\r\n            return false;\r\n        }\r\n        if (exp.type !== 4 /* SIMPLE_EXPRESSION */ ||\r\n            (exp.isStatic !== branchExp.isStatic ||\r\n                exp.content !== branchExp.content)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction getParentCondition(node) {\r\n    while (true) {\r\n        if (node.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n            if (node.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                node = node.alternate;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n        }\r\n        else if (node.type === 20 /* JS_CACHE_EXPRESSION */) {\r\n            node = node.value;\r\n        }\r\n    }\r\n}\n\nconst transformFor = createStructuralDirectiveTransform('for', (node, dir, context) => {\r\n    const { helper } = context;\r\n    return processFor(node, dir, context, forNode => {\r\n        // create the loop render function expression now, and add the\r\n        // iterator on exit after all children have been traversed\r\n        const renderExp = createCallExpression(helper(RENDER_LIST), [\r\n            forNode.source\r\n        ]);\r\n        const keyProp = findProp(node, `key`);\r\n        const keyProperty = keyProp\r\n            ? createObjectProperty(`key`, keyProp.type === 6 /* ATTRIBUTE */\r\n                ? createSimpleExpression(keyProp.value.content, true)\r\n                : keyProp.exp)\r\n            : null;\r\n        const isStableFragment = forNode.source.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n            forNode.source.constType > 0 /* NOT_CONSTANT */;\r\n        const fragmentFlag = isStableFragment\r\n            ? 64 /* STABLE_FRAGMENT */\r\n            : keyProp\r\n                ? 128 /* KEYED_FRAGMENT */\r\n                : 256 /* UNKEYED_FRAGMENT */;\r\n        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, renderExp, fragmentFlag +\r\n            ((process.env.NODE_ENV !== 'production') ? ` /* ${PatchFlagNames[fragmentFlag]} */` : ``), undefined, undefined, true /* isBlock */, !isStableFragment /* disableTracking */, node.loc);\r\n        return () => {\r\n            // finish the codegen now that all children have been traversed\r\n            let childBlock;\r\n            const isTemplate = isTemplateNode(node);\r\n            const { children } = forNode;\r\n            // check <template v-for> key placement\r\n            if (((process.env.NODE_ENV !== 'production') || !true) && isTemplate) {\r\n                node.children.some(c => {\r\n                    if (c.type === 1 /* ELEMENT */) {\r\n                        const key = findProp(c, 'key');\r\n                        if (key) {\r\n                            context.onError(createCompilerError(32 /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */, key.loc));\r\n                            return true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1 /* ELEMENT */;\r\n            const slotOutlet = isSlotOutlet(node)\r\n                ? node\r\n                : isTemplate &&\r\n                    node.children.length === 1 &&\r\n                    isSlotOutlet(node.children[0])\r\n                    ? node.children[0] // api-extractor somehow fails to infer this\r\n                    : null;\r\n            if (slotOutlet) {\r\n                // <slot v-for=\"...\"> or <template v-for=\"...\"><slot/></template>\r\n                childBlock = slotOutlet.codegenNode;\r\n                if (isTemplate && keyProperty) {\r\n                    // <template v-for=\"...\" :key=\"...\"><slot/></template>\r\n                    // we need to inject the key to the renderSlot() call.\r\n                    // the props for renderSlot is passed as the 3rd argument.\r\n                    injectProp(childBlock, keyProperty, context);\r\n                }\r\n            }\r\n            else if (needFragmentWrapper) {\r\n                // <template v-for=\"...\"> with text or multi-elements\r\n                // should generate a fragment block for each loop\r\n                childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : undefined, node.children, 64 /* STABLE_FRAGMENT */ +\r\n                    ((process.env.NODE_ENV !== 'production')\r\n                        ? ` /* ${PatchFlagNames[64 /* STABLE_FRAGMENT */]} */`\r\n                        : ``), undefined, undefined, true);\r\n            }\r\n            else {\r\n                // Normal element v-for. Directly use the child's codegenNode\r\n                // but mark it as a block.\r\n                childBlock = children[0]\r\n                    .codegenNode;\r\n                if (isTemplate && keyProperty) {\r\n                    injectProp(childBlock, keyProperty, context);\r\n                }\r\n                childBlock.isBlock = !isStableFragment;\r\n                if (childBlock.isBlock) {\r\n                    helper(OPEN_BLOCK);\r\n                    helper(CREATE_BLOCK);\r\n                }\r\n                else {\r\n                    helper(CREATE_VNODE);\r\n                }\r\n            }\r\n            renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true /* force newline */));\r\n        };\r\n    });\r\n});\r\n// target-agnostic transform used for both Client and SSR\r\nfunction processFor(node, dir, context, processCodegen) {\r\n    if (!dir.exp) {\r\n        context.onError(createCompilerError(30 /* X_V_FOR_NO_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const parseResult = parseForExpression(\r\n    // can only be simple expression because vFor transform is applied\r\n    // before expression transform.\r\n    dir.exp, context);\r\n    if (!parseResult) {\r\n        context.onError(createCompilerError(31 /* X_V_FOR_MALFORMED_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const { addIdentifiers, removeIdentifiers, scopes } = context;\r\n    const { source, value, key, index } = parseResult;\r\n    const forNode = {\r\n        type: 11 /* FOR */,\r\n        loc: dir.loc,\r\n        source,\r\n        valueAlias: value,\r\n        keyAlias: key,\r\n        objectIndexAlias: index,\r\n        parseResult,\r\n        children: isTemplateNode(node) ? node.children : [node]\r\n    };\r\n    context.replaceNode(forNode);\r\n    // bookkeeping\r\n    scopes.vFor++;\r\n    const onExit = processCodegen && processCodegen(forNode);\r\n    return () => {\r\n        scopes.vFor--;\r\n        if (onExit)\r\n            onExit();\r\n    };\r\n}\r\nconst forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\r\n// This regex doesn't cover the case if key or index aliases have destructuring,\r\n// but those do not make sense in the first place, so this works in practice.\r\nconst forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\nconst stripParensRE = /^\\(|\\)$/g;\r\nfunction parseForExpression(input, context) {\r\n    const loc = input.loc;\r\n    const exp = input.content;\r\n    const inMatch = exp.match(forAliasRE);\r\n    if (!inMatch)\r\n        return;\r\n    const [, LHS, RHS] = inMatch;\r\n    const result = {\r\n        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),\r\n        value: undefined,\r\n        key: undefined,\r\n        index: undefined\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production') && true) {\r\n        validateBrowserExpression(result.source, context);\r\n    }\r\n    let valueContent = LHS.trim()\r\n        .replace(stripParensRE, '')\r\n        .trim();\r\n    const trimmedOffset = LHS.indexOf(valueContent);\r\n    const iteratorMatch = valueContent.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n        valueContent = valueContent.replace(forIteratorRE, '').trim();\r\n        const keyContent = iteratorMatch[1].trim();\r\n        let keyOffset;\r\n        if (keyContent) {\r\n            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);\r\n            result.key = createAliasExpression(loc, keyContent, keyOffset);\r\n            if ((process.env.NODE_ENV !== 'production') && true) {\r\n                validateBrowserExpression(result.key, context, true);\r\n            }\r\n        }\r\n        if (iteratorMatch[2]) {\r\n            const indexContent = iteratorMatch[2].trim();\r\n            if (indexContent) {\r\n                result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key\r\n                    ? keyOffset + keyContent.length\r\n                    : trimmedOffset + valueContent.length));\r\n                if ((process.env.NODE_ENV !== 'production') && true) {\r\n                    validateBrowserExpression(result.index, context, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (valueContent) {\r\n        result.value = createAliasExpression(loc, valueContent, trimmedOffset);\r\n        if ((process.env.NODE_ENV !== 'production') && true) {\r\n            validateBrowserExpression(result.value, context, true);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction createAliasExpression(range, content, offset) {\r\n    return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));\r\n}\r\nfunction createForLoopParams({ value, key, index }) {\r\n    const params = [];\r\n    if (value) {\r\n        params.push(value);\r\n    }\r\n    if (key) {\r\n        if (!value) {\r\n            params.push(createSimpleExpression(`_`, false));\r\n        }\r\n        params.push(key);\r\n    }\r\n    if (index) {\r\n        if (!key) {\r\n            if (!value) {\r\n                params.push(createSimpleExpression(`_`, false));\r\n            }\r\n            params.push(createSimpleExpression(`__`, false));\r\n        }\r\n        params.push(index);\r\n    }\r\n    return params;\r\n}\n\nconst defaultFallback = createSimpleExpression(`undefined`, false);\r\n// A NodeTransform that:\r\n// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed\r\n//    by transformExpression. This is only applied in non-browser builds with\r\n//    { prefixIdentifiers: true }.\r\n// 2. Track v-slot depths so that we know a slot is inside another slot.\r\n//    Note the exit callback is executed before buildSlots() on the same node,\r\n//    so only nested slots see positive numbers.\r\nconst trackSlotScopes = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        (node.tagType === 1 /* COMPONENT */ ||\r\n            node.tagType === 3 /* TEMPLATE */)) {\r\n        // We are only checking non-empty v-slot here\r\n        // since we only care about slots that introduce scope variables.\r\n        const vSlot = findDir(node, 'slot');\r\n        if (vSlot) {\r\n            vSlot.exp;\r\n            context.scopes.vSlot++;\r\n            return () => {\r\n                context.scopes.vSlot--;\r\n            };\r\n        }\r\n    }\r\n};\r\n// A NodeTransform that tracks scope identifiers for scoped slots with v-for.\r\n// This transform is only applied in non-browser builds with { prefixIdentifiers: true }\r\nconst trackVForSlotScopes = (node, context) => {\r\n    let vFor;\r\n    if (isTemplateNode(node) &&\r\n        node.props.some(isVSlot) &&\r\n        (vFor = findDir(node, 'for'))) {\r\n        const result = (vFor.parseResult = parseForExpression(vFor.exp, context));\r\n        if (result) {\r\n            const { value, key, index } = result;\r\n            const { addIdentifiers, removeIdentifiers } = context;\r\n            value && addIdentifiers(value);\r\n            key && addIdentifiers(key);\r\n            index && addIdentifiers(index);\r\n            return () => {\r\n                value && removeIdentifiers(value);\r\n                key && removeIdentifiers(key);\r\n                index && removeIdentifiers(index);\r\n            };\r\n        }\r\n    }\r\n};\r\nconst buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false /* newline */, true /* isSlot */, children.length ? children[0].loc : loc);\r\n// Instead of being a DirectiveTransform, v-slot processing is called during\r\n// transformElement to build the slots object for a component.\r\nfunction buildSlots(node, context, buildSlotFn = buildClientSlotFn) {\r\n    context.helper(WITH_CTX);\r\n    const { children, loc } = node;\r\n    const slotsProperties = [];\r\n    const dynamicSlots = [];\r\n    const buildDefaultSlotProperty = (props, children) => createObjectProperty(`default`, buildSlotFn(props, children, loc));\r\n    // If the slot is inside a v-for or another v-slot, force it to be dynamic\r\n    // since it likely uses a scope variable.\r\n    let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;\r\n    // 1. Check for slot with slotProps on component itself.\r\n    //    <Comp v-slot=\"{ prop }\"/>\r\n    const onComponentSlot = findDir(node, 'slot', true);\r\n    if (onComponentSlot) {\r\n        const { arg, exp } = onComponentSlot;\r\n        if (arg && !isStaticExp(arg)) {\r\n            hasDynamicSlots = true;\r\n        }\r\n        slotsProperties.push(createObjectProperty(arg || createSimpleExpression('default', true), buildSlotFn(exp, children, loc)));\r\n    }\r\n    // 2. Iterate through children and check for template slots\r\n    //    <template v-slot:foo=\"{ prop }\">\r\n    let hasTemplateSlots = false;\r\n    let hasNamedDefaultSlot = false;\r\n    const implicitDefaultChildren = [];\r\n    const seenSlotNames = new Set();\r\n    for (let i = 0; i < children.length; i++) {\r\n        const slotElement = children[i];\r\n        let slotDir;\r\n        if (!isTemplateNode(slotElement) ||\r\n            !(slotDir = findDir(slotElement, 'slot', true))) {\r\n            // not a <template v-slot>, skip.\r\n            if (slotElement.type !== 3 /* COMMENT */) {\r\n                implicitDefaultChildren.push(slotElement);\r\n            }\r\n            continue;\r\n        }\r\n        if (onComponentSlot) {\r\n            // already has on-component slot - this is incorrect usage.\r\n            context.onError(createCompilerError(36 /* X_V_SLOT_MIXED_SLOT_USAGE */, slotDir.loc));\r\n            break;\r\n        }\r\n        hasTemplateSlots = true;\r\n        const { children: slotChildren, loc: slotLoc } = slotElement;\r\n        const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;\r\n        // check if name is dynamic.\r\n        let staticSlotName;\r\n        if (isStaticExp(slotName)) {\r\n            staticSlotName = slotName ? slotName.content : `default`;\r\n        }\r\n        else {\r\n            hasDynamicSlots = true;\r\n        }\r\n        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);\r\n        // check if this slot is conditional (v-if/v-for)\r\n        let vIf;\r\n        let vElse;\r\n        let vFor;\r\n        if ((vIf = findDir(slotElement, 'if'))) {\r\n            hasDynamicSlots = true;\r\n            dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));\r\n        }\r\n        else if ((vElse = findDir(slotElement, /^else(-if)?$/, true /* allowEmpty */))) {\r\n            // find adjacent v-if\r\n            let j = i;\r\n            let prev;\r\n            while (j--) {\r\n                prev = children[j];\r\n                if (prev.type !== 3 /* COMMENT */) {\r\n                    break;\r\n                }\r\n            }\r\n            if (prev && isTemplateNode(prev) && findDir(prev, 'if')) {\r\n                // remove node\r\n                children.splice(i, 1);\r\n                i--;\r\n                // attach this slot to previous conditional\r\n                let conditional = dynamicSlots[dynamicSlots.length - 1];\r\n                while (conditional.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                    conditional = conditional.alternate;\r\n                }\r\n                conditional.alternate = vElse.exp\r\n                    ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback)\r\n                    : buildDynamicSlot(slotName, slotFunction);\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(29 /* X_V_ELSE_NO_ADJACENT_IF */, vElse.loc));\r\n            }\r\n        }\r\n        else if ((vFor = findDir(slotElement, 'for'))) {\r\n            hasDynamicSlots = true;\r\n            const parseResult = vFor.parseResult ||\r\n                parseForExpression(vFor.exp, context);\r\n            if (parseResult) {\r\n                // Render the dynamic slots as an array and add it to the createSlot()\r\n                // args. The runtime knows how to handle it appropriately.\r\n                dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [\r\n                    parseResult.source,\r\n                    createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true /* force newline */)\r\n                ]));\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(31 /* X_V_FOR_MALFORMED_EXPRESSION */, vFor.loc));\r\n            }\r\n        }\r\n        else {\r\n            // check duplicate static names\r\n            if (staticSlotName) {\r\n                if (seenSlotNames.has(staticSlotName)) {\r\n                    context.onError(createCompilerError(37 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */, dirLoc));\r\n                    continue;\r\n                }\r\n                seenSlotNames.add(staticSlotName);\r\n                if (staticSlotName === 'default') {\r\n                    hasNamedDefaultSlot = true;\r\n                }\r\n            }\r\n            slotsProperties.push(createObjectProperty(slotName, slotFunction));\r\n        }\r\n    }\r\n    if (!onComponentSlot) {\r\n        if (!hasTemplateSlots) {\r\n            // implicit default slot (on component)\r\n            slotsProperties.push(buildDefaultSlotProperty(undefined, children));\r\n        }\r\n        else if (implicitDefaultChildren.length) {\r\n            // implicit default slot (mixed with named slots)\r\n            if (hasNamedDefaultSlot) {\r\n                context.onError(createCompilerError(38 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */, implicitDefaultChildren[0].loc));\r\n            }\r\n            else {\r\n                slotsProperties.push(buildDefaultSlotProperty(undefined, implicitDefaultChildren));\r\n            }\r\n        }\r\n    }\r\n    const slotFlag = hasDynamicSlots\r\n        ? 2 /* DYNAMIC */\r\n        : hasForwardedSlots(node.children)\r\n            ? 3 /* FORWARDED */\r\n            : 1 /* STABLE */;\r\n    let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_`, \r\n    // 2 = compiled but dynamic = can skip normalization, but must run diff\r\n    // 1 = compiled and static = can skip normalization AND diff as optimized\r\n    createSimpleExpression(slotFlag + ((process.env.NODE_ENV !== 'production') ? ` /* ${slotFlagsText[slotFlag]} */` : ``), false))), loc);\r\n    if (dynamicSlots.length) {\r\n        slots = createCallExpression(context.helper(CREATE_SLOTS), [\r\n            slots,\r\n            createArrayExpression(dynamicSlots)\r\n        ]);\r\n    }\r\n    return {\r\n        slots,\r\n        hasDynamicSlots\r\n    };\r\n}\r\nfunction buildDynamicSlot(name, fn) {\r\n    return createObjectExpression([\r\n        createObjectProperty(`name`, name),\r\n        createObjectProperty(`fn`, fn)\r\n    ]);\r\n}\r\nfunction hasForwardedSlots(children) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        if (child.type === 1 /* ELEMENT */) {\r\n            if (child.tagType === 2 /* SLOT */ ||\r\n                (child.tagType === 0 /* ELEMENT */ &&\r\n                    hasForwardedSlots(child.children))) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\n\n// some directive transforms (e.g. v-model) may return a symbol for runtime\r\n// import, which should be used instead of a resolveDirective call.\r\nconst directiveImportMap = new WeakMap();\r\n// generate a JavaScript AST for this element's codegen\r\nconst transformElement = (node, context) => {\r\n    if (!(node.type === 1 /* ELEMENT */ &&\r\n        (node.tagType === 0 /* ELEMENT */ ||\r\n            node.tagType === 1 /* COMPONENT */))) {\r\n        return;\r\n    }\r\n    // perform the work on exit, after all child expressions have been\r\n    // processed and merged.\r\n    return function postTransformElement() {\r\n        const { tag, props } = node;\r\n        const isComponent = node.tagType === 1 /* COMPONENT */;\r\n        // The goal of the transform is to create a codegenNode implementing the\r\n        // VNodeCall interface.\r\n        const vnodeTag = isComponent\r\n            ? resolveComponentType(node, context)\r\n            : `\"${tag}\"`;\r\n        const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;\r\n        let vnodeProps;\r\n        let vnodeChildren;\r\n        let vnodePatchFlag;\r\n        let patchFlag = 0;\r\n        let vnodeDynamicProps;\r\n        let dynamicPropNames;\r\n        let vnodeDirectives;\r\n        let shouldUseBlock = \r\n        // dynamic component may resolve to plain elements\r\n        isDynamicComponent ||\r\n            vnodeTag === TELEPORT ||\r\n            vnodeTag === SUSPENSE ||\r\n            (!isComponent &&\r\n                // <svg> and <foreignObject> must be forced into blocks so that block\r\n                // updates inside get proper isSVG flag at runtime. (#639, #643)\r\n                // This is technically web-specific, but splitting the logic out of core\r\n                // leads to too much unnecessary complexity.\r\n                (tag === 'svg' ||\r\n                    tag === 'foreignObject' ||\r\n                    // #938: elements with dynamic keys should be forced into blocks\r\n                    findProp(node, 'key', true)));\r\n        // props\r\n        if (props.length > 0) {\r\n            const propsBuildResult = buildProps(node, context);\r\n            vnodeProps = propsBuildResult.props;\r\n            patchFlag = propsBuildResult.patchFlag;\r\n            dynamicPropNames = propsBuildResult.dynamicPropNames;\r\n            const directives = propsBuildResult.directives;\r\n            vnodeDirectives =\r\n                directives && directives.length\r\n                    ? createArrayExpression(directives.map(dir => buildDirectiveArgs(dir, context)))\r\n                    : undefined;\r\n        }\r\n        // children\r\n        if (node.children.length > 0) {\r\n            if (vnodeTag === KEEP_ALIVE) {\r\n                // Although a built-in component, we compile KeepAlive with raw children\r\n                // instead of slot functions so that it can be used inside Transition\r\n                // or other Transition-wrapping HOCs.\r\n                // To ensure correct updates with block optimizations, we need to:\r\n                // 1. Force keep-alive into a block. This avoids its children being\r\n                //    collected by a parent block.\r\n                shouldUseBlock = true;\r\n                // 2. Force keep-alive to always be updated, since it uses raw children.\r\n                patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                if ((process.env.NODE_ENV !== 'production') && node.children.length > 1) {\r\n                    context.onError(createCompilerError(44 /* X_KEEP_ALIVE_INVALID_CHILDREN */, {\r\n                        start: node.children[0].loc.start,\r\n                        end: node.children[node.children.length - 1].loc.end,\r\n                        source: ''\r\n                    }));\r\n                }\r\n            }\r\n            const shouldBuildAsSlots = isComponent &&\r\n                // Teleport is not a real component and has dedicated runtime handling\r\n                vnodeTag !== TELEPORT &&\r\n                // explained above.\r\n                vnodeTag !== KEEP_ALIVE;\r\n            if (shouldBuildAsSlots) {\r\n                const { slots, hasDynamicSlots } = buildSlots(node, context);\r\n                vnodeChildren = slots;\r\n                if (hasDynamicSlots) {\r\n                    patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n            else if (node.children.length === 1 && vnodeTag !== TELEPORT) {\r\n                const child = node.children[0];\r\n                const type = child.type;\r\n                // check for dynamic text children\r\n                const hasDynamicTextChild = type === 5 /* INTERPOLATION */ ||\r\n                    type === 8 /* COMPOUND_EXPRESSION */;\r\n                if (hasDynamicTextChild &&\r\n                    getConstantType(child, context) === 0 /* NOT_CONSTANT */) {\r\n                    patchFlag |= 1 /* TEXT */;\r\n                }\r\n                // pass directly if the only child is a text node\r\n                // (plain / interpolation / expression)\r\n                if (hasDynamicTextChild || type === 2 /* TEXT */) {\r\n                    vnodeChildren = child;\r\n                }\r\n                else {\r\n                    vnodeChildren = node.children;\r\n                }\r\n            }\r\n            else {\r\n                vnodeChildren = node.children;\r\n            }\r\n        }\r\n        // patchFlag & dynamicPropNames\r\n        if (patchFlag !== 0) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (patchFlag < 0) {\r\n                    // special flags (negative and mutually exclusive)\r\n                    vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;\r\n                }\r\n                else {\r\n                    // bitwise flags\r\n                    const flagNames = Object.keys(PatchFlagNames)\r\n                        .map(Number)\r\n                        .filter(n => n > 0 && patchFlag & n)\r\n                        .map(n => PatchFlagNames[n])\r\n                        .join(`, `);\r\n                    vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;\r\n                }\r\n            }\r\n            else {\r\n                vnodePatchFlag = String(patchFlag);\r\n            }\r\n            if (dynamicPropNames && dynamicPropNames.length) {\r\n                vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);\r\n            }\r\n        }\r\n        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false /* disableTracking */, node.loc);\r\n    };\r\n};\r\nfunction resolveComponentType(node, context, ssr = false) {\r\n    const { tag } = node;\r\n    // 1. dynamic component\r\n    const isProp = node.tag === 'component' ? findProp(node, 'is') : findDir(node, 'is');\r\n    if (isProp) {\r\n        const exp = isProp.type === 6 /* ATTRIBUTE */\r\n            ? isProp.value && createSimpleExpression(isProp.value.content, true)\r\n            : isProp.exp;\r\n        if (exp) {\r\n            return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\r\n                exp\r\n            ]);\r\n        }\r\n    }\r\n    // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)\r\n    const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);\r\n    if (builtIn) {\r\n        // built-ins are simply fallthroughs / have special handling during ssr\r\n        // so we don't need to import their runtime equivalents\r\n        if (!ssr)\r\n            context.helper(builtIn);\r\n        return builtIn;\r\n    }\r\n    // 5. user component (resolve)\r\n    context.helper(RESOLVE_COMPONENT);\r\n    context.components.add(tag);\r\n    return toValidAssetId(tag, `component`);\r\n}\r\nfunction buildProps(node, context, props = node.props, ssr = false) {\r\n    const { tag, loc: elementLoc } = node;\r\n    const isComponent = node.tagType === 1 /* COMPONENT */;\r\n    let properties = [];\r\n    const mergeArgs = [];\r\n    const runtimeDirectives = [];\r\n    // patchFlag analysis\r\n    let patchFlag = 0;\r\n    let hasRef = false;\r\n    let hasClassBinding = false;\r\n    let hasStyleBinding = false;\r\n    let hasHydrationEventBinding = false;\r\n    let hasDynamicKeys = false;\r\n    let hasVnodeHook = false;\r\n    const dynamicPropNames = [];\r\n    const analyzePatchFlag = ({ key, value }) => {\r\n        if (isStaticExp(key)) {\r\n            const name = key.content;\r\n            const isEventHandler = isOn(name);\r\n            if (!isComponent &&\r\n                isEventHandler &&\r\n                // omit the flag for click handlers because hydration gives click\r\n                // dedicated fast path.\r\n                name.toLowerCase() !== 'onclick' &&\r\n                // omit v-model handlers\r\n                name !== 'onUpdate:modelValue' &&\r\n                // omit onVnodeXXX hooks\r\n                !isReservedProp(name)) {\r\n                hasHydrationEventBinding = true;\r\n            }\r\n            if (isEventHandler && isReservedProp(name)) {\r\n                hasVnodeHook = true;\r\n            }\r\n            if (value.type === 20 /* JS_CACHE_EXPRESSION */ ||\r\n                ((value.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n                    value.type === 8 /* COMPOUND_EXPRESSION */) &&\r\n                    getConstantType(value, context) > 0)) {\r\n                // skip if the prop is a cached handler or has constant value\r\n                return;\r\n            }\r\n            if (name === 'ref') {\r\n                hasRef = true;\r\n            }\r\n            else if (name === 'class' && !isComponent) {\r\n                hasClassBinding = true;\r\n            }\r\n            else if (name === 'style' && !isComponent) {\r\n                hasStyleBinding = true;\r\n            }\r\n            else if (name !== 'key' && !dynamicPropNames.includes(name)) {\r\n                dynamicPropNames.push(name);\r\n            }\r\n        }\r\n        else {\r\n            hasDynamicKeys = true;\r\n        }\r\n    };\r\n    for (let i = 0; i < props.length; i++) {\r\n        // static attribute\r\n        const prop = props[i];\r\n        if (prop.type === 6 /* ATTRIBUTE */) {\r\n            const { loc, name, value } = prop;\r\n            let isStatic = true;\r\n            if (name === 'ref') {\r\n                hasRef = true;\r\n            }\r\n            // skip :is on <component>\r\n            if (name === 'is' && tag === 'component') {\r\n                continue;\r\n            }\r\n            properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : '', isStatic, value ? value.loc : loc)));\r\n        }\r\n        else {\r\n            // directives\r\n            const { name, arg, exp, loc } = prop;\r\n            const isBind = name === 'bind';\r\n            const isOn = name === 'on';\r\n            // skip v-slot - it is handled by its dedicated transform.\r\n            if (name === 'slot') {\r\n                if (!isComponent) {\r\n                    context.onError(createCompilerError(39 /* X_V_SLOT_MISPLACED */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            // skip v-once - it is handled by its dedicated transform.\r\n            if (name === 'once') {\r\n                continue;\r\n            }\r\n            // skip v-is and :is on <component>\r\n            if (name === 'is' ||\r\n                (isBind && tag === 'component' && isBindKey(arg, 'is'))) {\r\n                continue;\r\n            }\r\n            // skip v-on in SSR compilation\r\n            if (isOn && ssr) {\r\n                continue;\r\n            }\r\n            // special case for v-bind and v-on with no argument\r\n            if (!arg && (isBind || isOn)) {\r\n                hasDynamicKeys = true;\r\n                if (exp) {\r\n                    if (properties.length) {\r\n                        mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n                        properties = [];\r\n                    }\r\n                    if (isBind) {\r\n                        mergeArgs.push(exp);\r\n                    }\r\n                    else {\r\n                        // v-on=\"obj\" -> toHandlers(obj)\r\n                        mergeArgs.push({\r\n                            type: 14 /* JS_CALL_EXPRESSION */,\r\n                            loc,\r\n                            callee: context.helper(TO_HANDLERS),\r\n                            arguments: [exp]\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    context.onError(createCompilerError(isBind\r\n                        ? 33 /* X_V_BIND_NO_EXPRESSION */\r\n                        : 34 /* X_V_ON_NO_EXPRESSION */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            const directiveTransform = context.directiveTransforms[name];\r\n            if (directiveTransform) {\r\n                // has built-in directive transform.\r\n                const { props, needRuntime } = directiveTransform(prop, node, context);\r\n                !ssr && props.forEach(analyzePatchFlag);\r\n                properties.push(...props);\r\n                if (needRuntime) {\r\n                    runtimeDirectives.push(prop);\r\n                    if (isSymbol(needRuntime)) {\r\n                        directiveImportMap.set(prop, needRuntime);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // no built-in transform, this is a user custom directive.\r\n                runtimeDirectives.push(prop);\r\n            }\r\n        }\r\n    }\r\n    let propsExpression = undefined;\r\n    // has v-bind=\"object\" or v-on=\"object\", wrap with mergeProps\r\n    if (mergeArgs.length) {\r\n        if (properties.length) {\r\n            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n        }\r\n        if (mergeArgs.length > 1) {\r\n            propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);\r\n        }\r\n        else {\r\n            // single v-bind with nothing else - no need for a mergeProps call\r\n            propsExpression = mergeArgs[0];\r\n        }\r\n    }\r\n    else if (properties.length) {\r\n        propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);\r\n    }\r\n    // patchFlag analysis\r\n    if (hasDynamicKeys) {\r\n        patchFlag |= 16 /* FULL_PROPS */;\r\n    }\r\n    else {\r\n        if (hasClassBinding) {\r\n            patchFlag |= 2 /* CLASS */;\r\n        }\r\n        if (hasStyleBinding) {\r\n            patchFlag |= 4 /* STYLE */;\r\n        }\r\n        if (dynamicPropNames.length) {\r\n            patchFlag |= 8 /* PROPS */;\r\n        }\r\n        if (hasHydrationEventBinding) {\r\n            patchFlag |= 32 /* HYDRATE_EVENTS */;\r\n        }\r\n    }\r\n    if ((patchFlag === 0 || patchFlag === 32 /* HYDRATE_EVENTS */) &&\r\n        (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {\r\n        patchFlag |= 512 /* NEED_PATCH */;\r\n    }\r\n    return {\r\n        props: propsExpression,\r\n        directives: runtimeDirectives,\r\n        patchFlag,\r\n        dynamicPropNames\r\n    };\r\n}\r\n// Dedupe props in an object literal.\r\n// Literal duplicated attributes would have been warned during the parse phase,\r\n// however, it's possible to encounter duplicated `onXXX` handlers with different\r\n// modifiers. We also need to merge static and dynamic class / style attributes.\r\n// - onXXX handlers / style: merge into array\r\n// - class: merge into single expression with concatenation\r\nfunction dedupeProperties(properties) {\r\n    const knownProps = new Map();\r\n    const deduped = [];\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const prop = properties[i];\r\n        // dynamic keys are always allowed\r\n        if (prop.key.type === 8 /* COMPOUND_EXPRESSION */ || !prop.key.isStatic) {\r\n            deduped.push(prop);\r\n            continue;\r\n        }\r\n        const name = prop.key.content;\r\n        const existing = knownProps.get(name);\r\n        if (existing) {\r\n            if (name === 'style' || name === 'class' || name.startsWith('on')) {\r\n                mergeAsArray(existing, prop);\r\n            }\r\n            // unexpected duplicate, should have emitted error during parse\r\n        }\r\n        else {\r\n            knownProps.set(name, prop);\r\n            deduped.push(prop);\r\n        }\r\n    }\r\n    return deduped;\r\n}\r\nfunction mergeAsArray(existing, incoming) {\r\n    if (existing.value.type === 17 /* JS_ARRAY_EXPRESSION */) {\r\n        existing.value.elements.push(incoming.value);\r\n    }\r\n    else {\r\n        existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);\r\n    }\r\n}\r\nfunction buildDirectiveArgs(dir, context) {\r\n    const dirArgs = [];\r\n    const runtime = directiveImportMap.get(dir);\r\n    if (runtime) {\r\n        // built-in directive with runtime\r\n        dirArgs.push(context.helperString(runtime));\r\n    }\r\n    else {\r\n        {\r\n            // inject statement for resolving directive\r\n            context.helper(RESOLVE_DIRECTIVE);\r\n            context.directives.add(dir.name);\r\n            dirArgs.push(toValidAssetId(dir.name, `directive`));\r\n        }\r\n    }\r\n    const { loc } = dir;\r\n    if (dir.exp)\r\n        dirArgs.push(dir.exp);\r\n    if (dir.arg) {\r\n        if (!dir.exp) {\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        dirArgs.push(dir.arg);\r\n    }\r\n    if (Object.keys(dir.modifiers).length) {\r\n        if (!dir.arg) {\r\n            if (!dir.exp) {\r\n                dirArgs.push(`void 0`);\r\n            }\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        const trueExpression = createSimpleExpression(`true`, false, loc);\r\n        dirArgs.push(createObjectExpression(dir.modifiers.map(modifier => createObjectProperty(modifier, trueExpression)), loc));\r\n    }\r\n    return createArrayExpression(dirArgs, dir.loc);\r\n}\r\nfunction stringifyDynamicPropNames(props) {\r\n    let propsNamesString = `[`;\r\n    for (let i = 0, l = props.length; i < l; i++) {\r\n        propsNamesString += JSON.stringify(props[i]);\r\n        if (i < l - 1)\r\n            propsNamesString += ', ';\r\n    }\r\n    return propsNamesString + `]`;\r\n}\n\n(process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\n(process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n});\n\nconst transformSlotOutlet = (node, context) => {\r\n    if (isSlotOutlet(node)) {\r\n        const { children, loc } = node;\r\n        const { slotName, slotProps } = processSlotOutlet(node, context);\r\n        const slotArgs = [\r\n            context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,\r\n            slotName\r\n        ];\r\n        if (slotProps) {\r\n            slotArgs.push(slotProps);\r\n        }\r\n        if (children.length) {\r\n            if (!slotProps) {\r\n                slotArgs.push(`{}`);\r\n            }\r\n            slotArgs.push(createFunctionExpression([], children, false, false, loc));\r\n        }\r\n        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);\r\n    }\r\n};\r\nfunction processSlotOutlet(node, context) {\r\n    let slotName = `\"default\"`;\r\n    let slotProps = undefined;\r\n    const nonNameProps = [];\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (p.value) {\r\n                if (p.name === 'name') {\r\n                    slotName = JSON.stringify(p.value.content);\r\n                }\r\n                else {\r\n                    p.name = camelize(p.name);\r\n                    nonNameProps.push(p);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (p.name === 'bind' && isBindKey(p.arg, 'name')) {\r\n                if (p.exp)\r\n                    slotName = p.exp;\r\n            }\r\n            else {\r\n                if (p.name === 'bind' && p.arg && isStaticExp(p.arg)) {\r\n                    p.arg.content = camelize(p.arg.content);\r\n                }\r\n                nonNameProps.push(p);\r\n            }\r\n        }\r\n    }\r\n    if (nonNameProps.length > 0) {\r\n        const { props, directives } = buildProps(node, context, nonNameProps);\r\n        slotProps = props;\r\n        if (directives.length) {\r\n            context.onError(createCompilerError(35 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */, directives[0].loc));\r\n        }\r\n    }\r\n    return {\r\n        slotName,\r\n        slotProps\r\n    };\r\n}\n\nconst fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^\\s*function(?:\\s+[\\w$]+)?\\s*\\(/;\r\nconst transformOn = (dir, node, context, augmentor) => {\r\n    const { loc, modifiers, arg } = dir;\r\n    if (!dir.exp && !modifiers.length) {\r\n        context.onError(createCompilerError(34 /* X_V_ON_NO_EXPRESSION */, loc));\r\n    }\r\n    let eventName;\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            const rawName = arg.content;\r\n            // for all event listeners, auto convert it to camelCase. See issue #2249\r\n            eventName = createSimpleExpression(toHandlerKey(camelize$1(rawName)), true, arg.loc);\r\n        }\r\n        else {\r\n            // #2388\r\n            eventName = createCompoundExpression([\r\n                `${context.helperString(TO_HANDLER_KEY)}(`,\r\n                arg,\r\n                `)`\r\n            ]);\r\n        }\r\n    }\r\n    else {\r\n        // already a compound expression.\r\n        eventName = arg;\r\n        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);\r\n        eventName.children.push(`)`);\r\n    }\r\n    // handler processing\r\n    let exp = dir.exp;\r\n    if (exp && !exp.content.trim()) {\r\n        exp = undefined;\r\n    }\r\n    let shouldCache = context.cacheHandlers && !exp;\r\n    if (exp) {\r\n        const isMemberExp = isMemberExpression(exp.content);\r\n        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));\r\n        const hasMultipleStatements = exp.content.includes(`;`);\r\n        if ((process.env.NODE_ENV !== 'production') && true) {\r\n            validateBrowserExpression(exp, context, false, hasMultipleStatements);\r\n        }\r\n        if (isInlineStatement || (shouldCache && isMemberExp)) {\r\n            // wrap inline statement in a function expression\r\n            exp = createCompoundExpression([\r\n                `${isInlineStatement\r\n                    ? `$event`\r\n                    : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,\r\n                exp,\r\n                hasMultipleStatements ? `}` : `)`\r\n            ]);\r\n        }\r\n    }\r\n    let ret = {\r\n        props: [\r\n            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))\r\n        ]\r\n    };\r\n    // apply extended compiler augmentor\r\n    if (augmentor) {\r\n        ret = augmentor(ret);\r\n    }\r\n    if (shouldCache) {\r\n        // cache handlers so that it's always the same handler being passed down.\r\n        // this avoids unnecessary re-renders when users use inline handlers on\r\n        // components.\r\n        ret.props[0].value = context.cache(ret.props[0].value);\r\n    }\r\n    return ret;\r\n};\n\n// v-bind without arg is handled directly in ./transformElements.ts due to it affecting\r\n// codegen for the entire props object. This transform here is only for v-bind\r\n// *with* args.\r\nconst transformBind = (dir, node, context) => {\r\n    const { exp, modifiers, loc } = dir;\r\n    const arg = dir.arg;\r\n    if (arg.type !== 4 /* SIMPLE_EXPRESSION */) {\r\n        arg.children.unshift(`(`);\r\n        arg.children.push(`) || \"\"`);\r\n    }\r\n    else if (!arg.isStatic) {\r\n        arg.content = `${arg.content} || \"\"`;\r\n    }\r\n    // .prop is no longer necessary due to new patch behavior\r\n    // .sync is replaced by v-model:arg\r\n    if (modifiers.includes('camel')) {\r\n        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            if (arg.isStatic) {\r\n                arg.content = camelize$1(arg.content);\r\n            }\r\n            else {\r\n                arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;\r\n            }\r\n        }\r\n        else {\r\n            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);\r\n            arg.children.push(`)`);\r\n        }\r\n    }\r\n    if (!exp ||\r\n        (exp.type === 4 /* SIMPLE_EXPRESSION */ && !exp.content.trim())) {\r\n        context.onError(createCompilerError(33 /* X_V_BIND_NO_EXPRESSION */, loc));\r\n        return {\r\n            props: [createObjectProperty(arg, createSimpleExpression('', true, loc))]\r\n        };\r\n    }\r\n    return {\r\n        props: [createObjectProperty(arg, exp)]\r\n    };\r\n};\n\n// Merge adjacent text nodes and expressions into a single expression\r\n// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.\r\nconst transformText = (node, context) => {\r\n    if (node.type === 0 /* ROOT */ ||\r\n        node.type === 1 /* ELEMENT */ ||\r\n        node.type === 11 /* FOR */ ||\r\n        node.type === 10 /* IF_BRANCH */) {\r\n        // perform the transform on node exit so that all expressions have already\r\n        // been processed.\r\n        return () => {\r\n            const children = node.children;\r\n            let currentContainer = undefined;\r\n            let hasText = false;\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (isText(child)) {\r\n                    hasText = true;\r\n                    for (let j = i + 1; j < children.length; j++) {\r\n                        const next = children[j];\r\n                        if (isText(next)) {\r\n                            if (!currentContainer) {\r\n                                currentContainer = children[i] = {\r\n                                    type: 8 /* COMPOUND_EXPRESSION */,\r\n                                    loc: child.loc,\r\n                                    children: [child]\r\n                                };\r\n                            }\r\n                            // merge adjacent text node into current\r\n                            currentContainer.children.push(` + `, next);\r\n                            children.splice(j, 1);\r\n                            j--;\r\n                        }\r\n                        else {\r\n                            currentContainer = undefined;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!hasText ||\r\n                // if this is a plain element with a single text child, leave it\r\n                // as-is since the runtime has dedicated fast path for this by directly\r\n                // setting textContent of the element.\r\n                // for component root it's always normalized anyway.\r\n                (children.length === 1 &&\r\n                    (node.type === 0 /* ROOT */ ||\r\n                        (node.type === 1 /* ELEMENT */ &&\r\n                            node.tagType === 0 /* ELEMENT */)))) {\r\n                return;\r\n            }\r\n            // pre-convert text nodes into createTextVNode(text) calls to avoid\r\n            // runtime normalization.\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (isText(child) || child.type === 8 /* COMPOUND_EXPRESSION */) {\r\n                    const callArgs = [];\r\n                    // createTextVNode defaults to single whitespace, so if it is a\r\n                    // single space the code could be an empty call to save bytes.\r\n                    if (child.type !== 2 /* TEXT */ || child.content !== ' ') {\r\n                        callArgs.push(child);\r\n                    }\r\n                    // mark dynamic text with flag so it gets patched inside a block\r\n                    if (!context.ssr &&\r\n                        getConstantType(child, context) === 0 /* NOT_CONSTANT */) {\r\n                        callArgs.push(1 /* TEXT */ +\r\n                            ((process.env.NODE_ENV !== 'production') ? ` /* ${PatchFlagNames[1 /* TEXT */]} */` : ``));\r\n                    }\r\n                    children[i] = {\r\n                        type: 12 /* TEXT_CALL */,\r\n                        content: child,\r\n                        loc: child.loc,\r\n                        codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\n\nconst seen = new WeakSet();\r\nconst transformOnce = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ && findDir(node, 'once', true)) {\r\n        if (seen.has(node)) {\r\n            return;\r\n        }\r\n        seen.add(node);\r\n        context.helper(SET_BLOCK_TRACKING);\r\n        return () => {\r\n            const cur = context.currentNode;\r\n            if (cur.codegenNode) {\r\n                cur.codegenNode = context.cache(cur.codegenNode, true /* isVNode */);\r\n            }\r\n        };\r\n    }\r\n};\n\nconst transformModel = (dir, node, context) => {\r\n    const { exp, arg } = dir;\r\n    if (!exp) {\r\n        context.onError(createCompilerError(40 /* X_V_MODEL_NO_EXPRESSION */, dir.loc));\r\n        return createTransformProps();\r\n    }\r\n    const rawExp = exp.loc.source;\r\n    const expString = exp.type === 4 /* SIMPLE_EXPRESSION */ ? exp.content : rawExp;\r\n    // im SFC <script setup> inline mode, the exp may have been transformed into\r\n    // _unref(exp)\r\n    context.bindingMetadata[rawExp];\r\n    const maybeRef = !true    /* SETUP_CONST */;\r\n    if (!isMemberExpression(expString) && !maybeRef) {\r\n        context.onError(createCompilerError(41 /* X_V_MODEL_MALFORMED_EXPRESSION */, exp.loc));\r\n        return createTransformProps();\r\n    }\r\n    const propName = arg ? arg : createSimpleExpression('modelValue', true);\r\n    const eventName = arg\r\n        ? isStaticExp(arg)\r\n            ? `onUpdate:${arg.content}`\r\n            : createCompoundExpression(['\"onUpdate:\" + ', arg])\r\n        : `onUpdate:modelValue`;\r\n    let assignmentExp;\r\n    const eventArg = context.isTS ? `($event: any)` : `$event`;\r\n    {\r\n        assignmentExp = createCompoundExpression([\r\n            `${eventArg} => (`,\r\n            exp,\r\n            ` = $event)`\r\n        ]);\r\n    }\r\n    const props = [\r\n        // modelValue: foo\r\n        createObjectProperty(propName, dir.exp),\r\n        // \"onUpdate:modelValue\": $event => (foo = $event)\r\n        createObjectProperty(eventName, assignmentExp)\r\n    ];\r\n    // modelModifiers: { foo: true, \"bar-baz\": true }\r\n    if (dir.modifiers.length && node.tagType === 1 /* COMPONENT */) {\r\n        const modifiers = dir.modifiers\r\n            .map(m => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`)\r\n            .join(`, `);\r\n        const modifiersKey = arg\r\n            ? isStaticExp(arg)\r\n                ? `${arg.content}Modifiers`\r\n                : createCompoundExpression([arg, ' + \"Modifiers\"'])\r\n            : `modelModifiers`;\r\n        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2 /* CAN_HOIST */)));\r\n    }\r\n    return createTransformProps(props);\r\n};\r\nfunction createTransformProps(props = []) {\r\n    return { props };\r\n}\n\nfunction getBaseTransformPreset(prefixIdentifiers) {\r\n    return [\r\n        [\r\n            transformOnce,\r\n            transformIf,\r\n            transformFor,\r\n            ...((process.env.NODE_ENV !== 'production')\r\n                    ? [transformExpression]\r\n                    : []),\r\n            transformSlotOutlet,\r\n            transformElement,\r\n            trackSlotScopes,\r\n            transformText\r\n        ],\r\n        {\r\n            on: transformOn,\r\n            bind: transformBind,\r\n            model: transformModel\r\n        }\r\n    ];\r\n}\r\n// we name it `baseCompile` so that higher order compilers like\r\n// @vue/compiler-dom can export `compile` while re-exporting everything else.\r\nfunction baseCompile(template, options = {}) {\r\n    const onError = options.onError || defaultOnError;\r\n    const isModuleMode = options.mode === 'module';\r\n    /* istanbul ignore if */\r\n    {\r\n        if (options.prefixIdentifiers === true) {\r\n            onError(createCompilerError(45 /* X_PREFIX_ID_NOT_SUPPORTED */));\r\n        }\r\n        else if (isModuleMode) {\r\n            onError(createCompilerError(46 /* X_MODULE_MODE_NOT_SUPPORTED */));\r\n        }\r\n    }\r\n    const prefixIdentifiers = !true ;\r\n    if (options.cacheHandlers) {\r\n        onError(createCompilerError(47 /* X_CACHE_HANDLER_NOT_SUPPORTED */));\r\n    }\r\n    if (options.scopeId && !isModuleMode) {\r\n        onError(createCompilerError(48 /* X_SCOPE_ID_NOT_SUPPORTED */));\r\n    }\r\n    const ast = isString(template) ? baseParse(template, options) : template;\r\n    const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();\r\n    transform(ast, extend({}, options, {\r\n        prefixIdentifiers,\r\n        nodeTransforms: [\r\n            ...nodeTransforms,\r\n            ...(options.nodeTransforms || []) // user transforms\r\n        ],\r\n        directiveTransforms: extend({}, directiveTransforms, options.directiveTransforms || {} // user transforms\r\n        )\r\n    }));\r\n    return generate(ast, extend({}, options, {\r\n        prefixIdentifiers\r\n    }));\r\n}\n\nconst noopDirectiveTransform = () => ({ props: [] });\n\nexport { BASE_TRANSITION, CAMELIZE, CAPITALIZE, CREATE_BLOCK, CREATE_COMMENT, CREATE_SLOTS, CREATE_STATIC, CREATE_TEXT, CREATE_VNODE, FRAGMENT, IS_REF, KEEP_ALIVE, MERGE_PROPS, OPEN_BLOCK, POP_SCOPE_ID, PUSH_SCOPE_ID, RENDER_LIST, RENDER_SLOT, RESOLVE_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_DYNAMIC_COMPONENT, SET_BLOCK_TRACKING, SUSPENSE, TELEPORT, TO_DISPLAY_STRING, TO_HANDLERS, TO_HANDLER_KEY, UNREF, WITH_CTX, WITH_DIRECTIVES, WITH_SCOPE_ID, advancePositionWithClone, advancePositionWithMutation, assert, baseCompile, baseParse, buildProps, buildSlots, createArrayExpression, createAssignmentExpression, createBlockStatement, createCacheExpression, createCallExpression, createCompilerError, createCompoundExpression, createConditionalExpression, createForLoopParams, createFunctionExpression, createIfStatement, createInterpolation, createObjectExpression, createObjectProperty, createReturnStatement, createRoot, createSequenceExpression, createSimpleExpression, createStructuralDirectiveTransform, createTemplateLiteral, createTransformContext, createVNodeCall, findDir, findProp, generate, getBaseTransformPreset, getInnerRange, hasDynamicKeyVBind, hasScopeRef, helperNameMap, injectProp, isBindKey, isBuiltInType, isCoreComponent, isMemberExpression, isSimpleIdentifier, isSlotOutlet, isStaticExp, isTemplateNode, isText, isVSlot, locStub, noopDirectiveTransform, processExpression, processFor, processIf, processSlotOutlet, registerRuntimeHelpers, resolveComponentType, toValidAssetId, trackSlotScopes, trackVForSlotScopes, transform, transformBind, transformElement, transformExpression, transformModel, transformOn, traverseNode };\n", "import { registerRuntimeHelpers, isBuiltInType, createSimpleExpression, createCompilerError, createObjectProperty, createCallExpression, TO_DISPLAY_STRING, transformModel as transformModel$1, findProp, hasDynamicKeyVBind, transformOn as transformOn$1, createCompoundExpression, isStaticExp, noopDirectiveTransform, baseCompile, baseParse } from '@vue/compiler-core';\nexport * from '@vue/compiler-core';\nimport { isVoidTag, isHTMLTag, isSVGTag, makeMap, parseStringStyle, capitalize, extend } from '@vue/shared';\n\nconst V_MODEL_RADIO = Symbol((process.env.NODE_ENV !== 'production') ? `vModelRadio` : ``);\r\nconst V_MODEL_CHECKBOX = Symbol((process.env.NODE_ENV !== 'production') ? `vModelCheckbox` : ``);\r\nconst V_MODEL_TEXT = Symbol((process.env.NODE_ENV !== 'production') ? `vModelText` : ``);\r\nconst V_MODEL_SELECT = Symbol((process.env.NODE_ENV !== 'production') ? `vModelSelect` : ``);\r\nconst V_MODEL_DYNAMIC = Symbol((process.env.NODE_ENV !== 'production') ? `vModelDynamic` : ``);\r\nconst V_ON_WITH_MODIFIERS = Symbol((process.env.NODE_ENV !== 'production') ? `vOnModifiersGuard` : ``);\r\nconst V_ON_WITH_KEYS = Symbol((process.env.NODE_ENV !== 'production') ? `vOnKeysGuard` : ``);\r\nconst V_SHOW = Symbol((process.env.NODE_ENV !== 'production') ? `vShow` : ``);\r\nconst TRANSITION = Symbol((process.env.NODE_ENV !== 'production') ? `Transition` : ``);\r\nconst TRANSITION_GROUP = Symbol((process.env.NODE_ENV !== 'production') ? `TransitionGroup` : ``);\r\nregisterRuntimeHelpers({\r\n    [V_MODEL_RADIO]: `vModelRadio`,\r\n    [V_MODEL_CHECKBOX]: `vModelCheckbox`,\r\n    [V_MODEL_TEXT]: `vModelText`,\r\n    [V_MODEL_SELECT]: `vModelSelect`,\r\n    [V_MODEL_DYNAMIC]: `vModelDynamic`,\r\n    [V_ON_WITH_MODIFIERS]: `withModifiers`,\r\n    [V_ON_WITH_KEYS]: `withKeys`,\r\n    [V_SHOW]: `vShow`,\r\n    [TRANSITION]: `Transition`,\r\n    [TRANSITION_GROUP]: `TransitionGroup`\r\n});\n\n/* eslint-disable no-restricted-globals */\r\nlet decoder;\r\nfunction decodeHtmlBrowser(raw) {\r\n    (decoder || (decoder = document.createElement('div'))).innerHTML = raw;\r\n    return decoder.textContent;\r\n}\n\nconst isRawTextContainer = /*#__PURE__*/ makeMap('style,iframe,script,noscript', true);\r\nconst parserOptions = {\r\n    isVoidTag,\r\n    isNativeTag: tag => isHTMLTag(tag) || isSVGTag(tag),\r\n    isPreTag: tag => tag === 'pre',\r\n    decodeEntities: decodeHtmlBrowser ,\r\n    isBuiltInComponent: (tag) => {\r\n        if (isBuiltInType(tag, `Transition`)) {\r\n            return TRANSITION;\r\n        }\r\n        else if (isBuiltInType(tag, `TransitionGroup`)) {\r\n            return TRANSITION_GROUP;\r\n        }\r\n    },\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher\r\n    getNamespace(tag, parent) {\r\n        let ns = parent ? parent.ns : 0 /* HTML */;\r\n        if (parent && ns === 2 /* MATH_ML */) {\r\n            if (parent.tag === 'annotation-xml') {\r\n                if (tag === 'svg') {\r\n                    return 1 /* SVG */;\r\n                }\r\n                if (parent.props.some(a => a.type === 6 /* ATTRIBUTE */ &&\r\n                    a.name === 'encoding' &&\r\n                    a.value != null &&\r\n                    (a.value.content === 'text/html' ||\r\n                        a.value.content === 'application/xhtml+xml'))) {\r\n                    ns = 0 /* HTML */;\r\n                }\r\n            }\r\n            else if (/^m(?:[ions]|text)$/.test(parent.tag) &&\r\n                tag !== 'mglyph' &&\r\n                tag !== 'malignmark') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        else if (parent && ns === 1 /* SVG */) {\r\n            if (parent.tag === 'foreignObject' ||\r\n                parent.tag === 'desc' ||\r\n                parent.tag === 'title') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === 'svg') {\r\n                return 1 /* SVG */;\r\n            }\r\n            if (tag === 'math') {\r\n                return 2 /* MATH_ML */;\r\n            }\r\n        }\r\n        return ns;\r\n    },\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments\r\n    getTextMode({ tag, ns }) {\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === 'textarea' || tag === 'title') {\r\n                return 1 /* RCDATA */;\r\n            }\r\n            if (isRawTextContainer(tag)) {\r\n                return 2 /* RAWTEXT */;\r\n            }\r\n        }\r\n        return 0 /* DATA */;\r\n    }\r\n};\n\n// Parse inline CSS strings for static style attributes into an object.\r\n// This is a NodeTransform since it works on the static `style` attribute and\r\n// converts it into a dynamic equivalent:\r\n// style=\"color: red\" -> :style='{ \"color\": \"red\" }'\r\n// It is then processed by `transformElement` and included in the generated\r\n// props.\r\nconst transformStyle = node => {\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        node.props.forEach((p, i) => {\r\n            if (p.type === 6 /* ATTRIBUTE */ && p.name === 'style' && p.value) {\r\n                // replace p with an expression node\r\n                node.props[i] = {\r\n                    type: 7 /* DIRECTIVE */,\r\n                    name: `bind`,\r\n                    arg: createSimpleExpression(`style`, true, p.loc),\r\n                    exp: parseInlineCSS(p.value.content, p.loc),\r\n                    modifiers: [],\r\n                    loc: p.loc\r\n                };\r\n            }\r\n        });\r\n    }\r\n};\r\nconst parseInlineCSS = (cssText, loc) => {\r\n    const normalized = parseStringStyle(cssText);\r\n    return createSimpleExpression(JSON.stringify(normalized), false, loc, 3 /* CAN_STRINGIFY */);\r\n};\n\nfunction createDOMCompilerError(code, loc) {\r\n    return createCompilerError(code, loc, (process.env.NODE_ENV !== 'production') || !true ? DOMErrorMessages : undefined);\r\n}\r\nconst DOMErrorMessages = {\r\n    [49 /* X_V_HTML_NO_EXPRESSION */]: `v-html is missing expression.`,\r\n    [50 /* X_V_HTML_WITH_CHILDREN */]: `v-html will override element children.`,\r\n    [51 /* X_V_TEXT_NO_EXPRESSION */]: `v-text is missing expression.`,\r\n    [52 /* X_V_TEXT_WITH_CHILDREN */]: `v-text will override element children.`,\r\n    [53 /* X_V_MODEL_ON_INVALID_ELEMENT */]: `v-model can only be used on <input>, <textarea> and <select> elements.`,\r\n    [54 /* X_V_MODEL_ARG_ON_ELEMENT */]: `v-model argument is not supported on plain elements.`,\r\n    [55 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,\r\n    [56 /* X_V_MODEL_UNNECESSARY_VALUE */]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,\r\n    [57 /* X_V_SHOW_NO_EXPRESSION */]: `v-show is missing expression.`,\r\n    [58 /* X_TRANSITION_INVALID_CHILDREN */]: `<Transition> expects exactly one child element or component.`,\r\n    [59 /* X_IGNORED_SIDE_EFFECT_TAG */]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`\r\n};\n\nconst transformVHtml = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(49 /* X_V_HTML_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(50 /* X_V_HTML_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression('', true))\r\n        ]\r\n    };\r\n};\n\nconst transformVText = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(51 /* X_V_TEXT_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(52 /* X_V_TEXT_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`textContent`, true), exp\r\n                ? createCallExpression(context.helperString(TO_DISPLAY_STRING), [exp], loc)\r\n                : createSimpleExpression('', true))\r\n        ]\r\n    };\r\n};\n\nconst transformModel = (dir, node, context) => {\r\n    const baseResult = transformModel$1(dir, node, context);\r\n    // base transform has errors OR component v-model (only need props)\r\n    if (!baseResult.props.length || node.tagType === 1 /* COMPONENT */) {\r\n        return baseResult;\r\n    }\r\n    if (dir.arg) {\r\n        context.onError(createDOMCompilerError(54 /* X_V_MODEL_ARG_ON_ELEMENT */, dir.arg.loc));\r\n    }\r\n    function checkDuplicatedValue() {\r\n        const value = findProp(node, 'value');\r\n        if (value) {\r\n            context.onError(createDOMCompilerError(56 /* X_V_MODEL_UNNECESSARY_VALUE */, value.loc));\r\n        }\r\n    }\r\n    const { tag } = node;\r\n    const isCustomElement = context.isCustomElement(tag);\r\n    if (tag === 'input' ||\r\n        tag === 'textarea' ||\r\n        tag === 'select' ||\r\n        isCustomElement) {\r\n        let directiveToUse = V_MODEL_TEXT;\r\n        let isInvalidType = false;\r\n        if (tag === 'input' || isCustomElement) {\r\n            const type = findProp(node, `type`);\r\n            if (type) {\r\n                if (type.type === 7 /* DIRECTIVE */) {\r\n                    // :type=\"foo\"\r\n                    directiveToUse = V_MODEL_DYNAMIC;\r\n                }\r\n                else if (type.value) {\r\n                    switch (type.value.content) {\r\n                        case 'radio':\r\n                            directiveToUse = V_MODEL_RADIO;\r\n                            break;\r\n                        case 'checkbox':\r\n                            directiveToUse = V_MODEL_CHECKBOX;\r\n                            break;\r\n                        case 'file':\r\n                            isInvalidType = true;\r\n                            context.onError(createDOMCompilerError(55 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */, dir.loc));\r\n                            break;\r\n                        default:\r\n                            // text type\r\n                            (process.env.NODE_ENV !== 'production') && checkDuplicatedValue();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            else if (hasDynamicKeyVBind(node)) {\r\n                // element has bindings with dynamic keys, which can possibly contain\r\n                // \"type\".\r\n                directiveToUse = V_MODEL_DYNAMIC;\r\n            }\r\n            else {\r\n                // text type\r\n                (process.env.NODE_ENV !== 'production') && checkDuplicatedValue();\r\n            }\r\n        }\r\n        else if (tag === 'select') {\r\n            directiveToUse = V_MODEL_SELECT;\r\n        }\r\n        else {\r\n            // textarea\r\n            (process.env.NODE_ENV !== 'production') && checkDuplicatedValue();\r\n        }\r\n        // inject runtime directive\r\n        // by returning the helper symbol via needRuntime\r\n        // the import will replaced a resolveDirective call.\r\n        if (!isInvalidType) {\r\n            baseResult.needRuntime = context.helper(directiveToUse);\r\n        }\r\n    }\r\n    else {\r\n        context.onError(createDOMCompilerError(53 /* X_V_MODEL_ON_INVALID_ELEMENT */, dir.loc));\r\n    }\r\n    // native vmodel doesn't need the `modelValue` props since they are also\r\n    // passed to the runtime as `binding.value`. removing it reduces code size.\r\n    baseResult.props = baseResult.props.filter(p => !(p.key.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n        p.key.content === 'modelValue'));\r\n    return baseResult;\r\n};\n\nconst isEventOptionModifier = /*#__PURE__*/ makeMap(`passive,once,capture`);\r\nconst isNonKeyModifier = /*#__PURE__*/ makeMap(\r\n// event propagation management\r\n`stop,prevent,self,` +\r\n    // system modifiers + exact\r\n    `ctrl,shift,alt,meta,exact,` +\r\n    // mouse\r\n    `middle`);\r\n// left & right could be mouse or key modifiers based on event type\r\nconst maybeKeyModifier = /*#__PURE__*/ makeMap('left,right');\r\nconst isKeyboardEvent = /*#__PURE__*/ makeMap(`onkeyup,onkeydown,onkeypress`, true);\r\nconst resolveModifiers = (key, modifiers) => {\r\n    const keyModifiers = [];\r\n    const nonKeyModifiers = [];\r\n    const eventOptionModifiers = [];\r\n    for (let i = 0; i < modifiers.length; i++) {\r\n        const modifier = modifiers[i];\r\n        if (isEventOptionModifier(modifier)) {\r\n            // eventOptionModifiers: modifiers for addEventListener() options,\r\n            // e.g. .passive & .capture\r\n            eventOptionModifiers.push(modifier);\r\n        }\r\n        else {\r\n            // runtimeModifiers: modifiers that needs runtime guards\r\n            if (maybeKeyModifier(modifier)) {\r\n                if (isStaticExp(key)) {\r\n                    if (isKeyboardEvent(key.content)) {\r\n                        keyModifiers.push(modifier);\r\n                    }\r\n                    else {\r\n                        nonKeyModifiers.push(modifier);\r\n                    }\r\n                }\r\n                else {\r\n                    keyModifiers.push(modifier);\r\n                    nonKeyModifiers.push(modifier);\r\n                }\r\n            }\r\n            else {\r\n                if (isNonKeyModifier(modifier)) {\r\n                    nonKeyModifiers.push(modifier);\r\n                }\r\n                else {\r\n                    keyModifiers.push(modifier);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        keyModifiers,\r\n        nonKeyModifiers,\r\n        eventOptionModifiers\r\n    };\r\n};\r\nconst transformClick = (key, event) => {\r\n    const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === 'onclick';\r\n    return isStaticClick\r\n        ? createSimpleExpression(event, true)\r\n        : key.type !== 4 /* SIMPLE_EXPRESSION */\r\n            ? createCompoundExpression([\r\n                `(`,\r\n                key,\r\n                `) === \"onClick\" ? \"${event}\" : (`,\r\n                key,\r\n                `)`\r\n            ])\r\n            : key;\r\n};\r\nconst transformOn = (dir, node, context) => {\r\n    return transformOn$1(dir, node, context, baseResult => {\r\n        const { modifiers } = dir;\r\n        if (!modifiers.length)\r\n            return baseResult;\r\n        let { key, value: handlerExp } = baseResult.props[0];\r\n        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers);\r\n        // normalize click.right and click.middle since they don't actually fire\r\n        if (nonKeyModifiers.includes('right')) {\r\n            key = transformClick(key, `onContextmenu`);\r\n        }\r\n        if (nonKeyModifiers.includes('middle')) {\r\n            key = transformClick(key, `onMouseup`);\r\n        }\r\n        if (nonKeyModifiers.length) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [\r\n                handlerExp,\r\n                JSON.stringify(nonKeyModifiers)\r\n            ]);\r\n        }\r\n        if (keyModifiers.length &&\r\n            // if event name is dynamic, always wrap with keys guard\r\n            (!isStaticExp(key) || isKeyboardEvent(key.content))) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [\r\n                handlerExp,\r\n                JSON.stringify(keyModifiers)\r\n            ]);\r\n        }\r\n        if (eventOptionModifiers.length) {\r\n            const modifierPostfix = eventOptionModifiers.map(capitalize).join('');\r\n            key = isStaticExp(key)\r\n                ? createSimpleExpression(`${key.content}${modifierPostfix}`, true)\r\n                : createCompoundExpression([`(`, key, `) + \"${modifierPostfix}\"`]);\r\n        }\r\n        return {\r\n            props: [createObjectProperty(key, handlerExp)]\r\n        };\r\n    });\r\n};\n\nconst transformShow = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(57 /* X_V_SHOW_NO_EXPRESSION */, loc));\r\n    }\r\n    return {\r\n        props: [],\r\n        needRuntime: context.helper(V_SHOW)\r\n    };\r\n};\n\nconst warnTransitionChildren = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 1 /* COMPONENT */) {\r\n        const component = context.isBuiltInComponent(node.tag);\r\n        if (component === TRANSITION) {\r\n            return () => {\r\n                if (node.children.length && hasMultipleChildren(node)) {\r\n                    context.onError(createDOMCompilerError(58 /* X_TRANSITION_INVALID_CHILDREN */, {\r\n                        start: node.children[0].loc.start,\r\n                        end: node.children[node.children.length - 1].loc.end,\r\n                        source: ''\r\n                    }));\r\n                }\r\n            };\r\n        }\r\n    }\r\n};\r\nfunction hasMultipleChildren(node) {\r\n    // #1352 filter out potential comment nodes.\r\n    const children = (node.children = node.children.filter(c => c.type !== 3 /* COMMENT */));\r\n    const child = children[0];\r\n    return (children.length !== 1 ||\r\n        child.type === 11 /* FOR */ ||\r\n        (child.type === 9 /* IF */ && child.branches.some(hasMultipleChildren)));\r\n}\n\nconst ignoreSideEffectTags = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 0 /* ELEMENT */ &&\r\n        (node.tag === 'script' || node.tag === 'style')) {\r\n        context.onError(createDOMCompilerError(59 /* X_IGNORED_SIDE_EFFECT_TAG */, node.loc));\r\n        context.removeNode();\r\n    }\r\n};\n\nconst DOMNodeTransforms = [\r\n    transformStyle,\r\n    ...((process.env.NODE_ENV !== 'production') ? [warnTransitionChildren] : [])\r\n];\r\nconst DOMDirectiveTransforms = {\r\n    cloak: noopDirectiveTransform,\r\n    html: transformVHtml,\r\n    text: transformVText,\r\n    model: transformModel,\r\n    on: transformOn,\r\n    show: transformShow\r\n};\r\nfunction compile(template, options = {}) {\r\n    return baseCompile(template, extend({}, parserOptions, options, {\r\n        nodeTransforms: [\r\n            // ignore <script> and <tag>\r\n            // this is not put inside DOMNodeTransforms because that list is used\r\n            // by compiler-ssr to generate vnode fallback branches\r\n            ignoreSideEffectTags,\r\n            ...DOMNodeTransforms,\r\n            ...(options.nodeTransforms || [])\r\n        ],\r\n        directiveTransforms: extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),\r\n        transformHoist: null \r\n    }));\r\n}\r\nfunction parse(template, options = {}) {\r\n    return baseParse(template, extend({}, parserOptions, options));\r\n}\n\nexport { DOMDirectiveTransforms, DOMNodeTransforms, TRANSITION, TRANSITION_GROUP, V_MODEL_CHECKBOX, V_MODEL_DYNAMIC, V_MODEL_RADIO, V_MODEL_SELECT, V_MODEL_TEXT, V_ON_WITH_KEYS, V_ON_WITH_MODIFIERS, V_SHOW, compile, createDOMCompilerError, parse, parserOptions, transformStyle };\n", "import * as runtimeDom from '@vue/runtime-dom';\nimport { initCustomFormatter, warn, registerRuntimeCompiler } from '@vue/runtime-dom';\nexport * from '@vue/runtime-dom';\nimport { compile } from '@vue/compiler-dom';\nimport { isString, NOOP, extend, generateCodeFrame } from '@vue/shared';\n\nfunction initDev() {\r\n    {\r\n        initCustomFormatter();\r\n    }\r\n}\n\n// This entry is the \"full-build\" that includes both the runtime\r\nif ((process.env.NODE_ENV !== 'production')) {\r\n    initDev();\r\n}\r\nconst compileCache = Object.create(null);\r\nfunction compileToFunction(template, options) {\r\n    if (!isString(template)) {\r\n        if (template.nodeType) {\r\n            template = template.innerHTML;\r\n        }\r\n        else {\r\n            (process.env.NODE_ENV !== 'production') && warn(`invalid template option: `, template);\r\n            return NOOP;\r\n        }\r\n    }\r\n    const key = template;\r\n    const cached = compileCache[key];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    if (template[0] === '#') {\r\n        const el = document.querySelector(template);\r\n        if ((process.env.NODE_ENV !== 'production') && !el) {\r\n            warn(`Template element not found or is empty: ${template}`);\r\n        }\r\n        // __UNSAFE__\r\n        // Reason: potential execution of JS expressions in in-DOM template.\r\n        // The user must make sure the in-DOM template is trusted. If it's rendered\r\n        // by the server, the template should not contain any user data.\r\n        template = el ? el.innerHTML : ``;\r\n    }\r\n    const { code } = compile(template, extend({\r\n        hoistStatic: true,\r\n        onError(err) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                const message = `Template compilation error: ${err.message}`;\r\n                const codeFrame = err.loc &&\r\n                    generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);\r\n                warn(codeFrame ? `${message}\\n${codeFrame}` : message);\r\n            }\r\n            else {\r\n                /* istanbul ignore next */\r\n                throw err;\r\n            }\r\n        }\r\n    }, options));\r\n    // The wildcard import results in a huge object with every export\r\n    // with keys that cannot be mangled, and can be quite heavy size-wise.\r\n    // In the global build we know `Vue` is available globally so we can avoid\r\n    // the wildcard object.\r\n    const render = (new Function('Vue', code)(runtimeDom));\r\n    render._rc = true;\r\n    return (compileCache[key] = render);\r\n}\r\nregisterRuntimeCompiler(compileToFunction);\n\nexport { compileToFunction as compile };\n"],
  "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",
  "names": []
}
